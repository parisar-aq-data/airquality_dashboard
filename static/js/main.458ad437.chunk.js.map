{"version":3,"sources":["paths.js","visualizationPanel/SVGContainer.js","visualizationPanel/vizTools/ReactMapTool.js","visualizationPanel/vizTools/InfocardTool.js","visualizationPanel/vizTools/BarchartTool.js","visualizationPanel/vizTools/LinechartTool.js","visualizationPanel/vizTools/LinechartToolMonitorHistory.js","visualizationPanel/VizPanel.js","assets/ParisarLogo.png","controlPanel/ControlPanel.js","routes/Faq.js","routes/Contact.js","App.js","index.js"],"names":["API","RANKEDUNITS","concat","WARDORMONITORHISTORY","WARDPOLYGONS","WARDORMONITORSUMMARY","WARDSANDMONITORS","POLLUTANTHISTORY","SVGContainer","props","children","useState","containerWidth","setWidth","containerHeight","setHeight","containerRef","useRef","useEffect","current","offsetWidth","offsetHeight","clonedChild","React","cloneElement","width","height","className","styleName","ref","MonitorView","map","useMap","matchedFeature","wardsAndMonitors","find","feat","name","toUpperCase","selectedWardOrMonitor","parseFloat","lat","lon","centerX","centerY","setView","PanCityView","Legend","legend","L","control","position","onAdd","from","to","d","div","DomUtil","create","grades","labels","push","i","length","innerHTML","join","addTo","ReactMapTool","features","polygons","iudxMarkers","safarMarkers","mpcbMarkers","shapes","feat_coordinates","geometry","coordinates","j","reverse","forEach","index","Polygon","pathOptions","color","fillColor","properties","average_daily_pm25","fillOpacity","positions","Tooltip","sticky","name_mr","Number","toFixed","monitors","fillIudx","fillSafar","fillmpcb","filter","monitor","type","mon","CircleMarker","center","radius","MapContainer","scrollWheelZoom","panCityView","TileLayer","attribution","url","LayersControl","Overlay","checked","selectedMode","LayerGroup","InfocardTool","svgRef","svgWidth","size_per_division","svgHeight","summaryData","wardOrMonitorSummary","record","metric","num_missing_days","tag","pollution_rank","toString","num_units","count_exceeds_threshold","wrap","text","each","word","d3","this","words","split","line","lineNumber","y","attr","dy","tspan","append","pop","node","getComputedTextLength","console","log","svgEl","selectAll","remove","h","xScale","domain","range","x_scale","padding","xAxis","call","style","bandwidth","g","data","title","BarchartTool","margin","rankedWards","sort","a","b","best","y_scale","Average_pm25","yAxis","enter","LinechartTool","dates","iudx_data","safar_data","ward_data","data_21","data_22","pollutantHistory","Date","Month_Year","Year","nice","monthly_average_pm25","x1","y1","x2","y2","datum","x","renderPanCityView","renderMonitorView","LinechartToolMonitorHistory","colorPalette","X","Month","yScale","uniqueYears","Set","yr","data_yr","month_number","VizPanel","state","paths","requestOptions","method","headers","body","fetch","response","json","poll_history","setState","loading","getPollutantHistory","units","undefined","wardPolygons","unit","ui","fontStyle","wardOrMonitorHistory","Component","dataSources","ControlPanel","unitSelectRef","pollutantSelectRef","setStartDate","date","setEndDate","setSelectedMode","e","ds","target","value","selectValue","clearValue","filteredMonitors","filterWardsAndMonitors","selectedDataSourceId","setSelectedWardOrMonitor","handlePanCityView","toFilterBy","startDate","setHours","getTimezoneOffset","getWardsAndMonitors","then","buttons","Button","fontSize","onClick","event","active","zIndex","ButtonGroup","size","placeholder","options","onChange","variant","wrapperClassName","dateFormat","selected","endDate","updateDates","Faq","fullscreen","setFullscreen","show","setShow","backgroundColor","borderColor","Modal","onHide","Header","closeButton","Title","Body","Contact","lgShow","setLgShow","id","href","rel","App","get_pm25Ranks","getWardOrMonitorHistory","getWardOrMonitorSummary","handleAlerts","status","alert","alertMessage","alertRaised","message","payload","JSON","stringify","responseObject","today","date1","toISOString","categories","getWardPolygons","prevProps","prevState","content","Alert","onClose","dismissible","Heading","Navbar","bg","Container","Brand","alt","src","logo","Nav","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.458ad437.chunk.js","sourcesContent":["export const API = \"https://server2.nikhilvj.co.in/airdata_api/API/\";\n// export const API = \"http://localhost:5600/API/\";\n\nexport const RANKEDUNITS = API.concat(\"rankedPm25Units\");\n\nexport const WARDORMONITORHISTORY = API.concat(\"getWardOrMonitorHistory\");\nexport const WARDPOLYGONS = API.concat(\"wardPolygons\");\nexport const WARDORMONITORSUMMARY = API.concat(\"wardOrMonitorSummary\");\n\nexport const WARDSANDMONITORS = API.concat(\"wardsAndMonitors\");\nexport const POLLUTANTHISTORY = API.concat(\"pollutantHistory\");\n\nexport const WARDCENTROIDS = API.concat(\"wardCentroids\");\n","import React, { useEffect, useRef, useState } from \"react\";\n\nexport default function SVGContainer(props) {\n  const { children } = props;\n\n  const [containerWidth, setWidth] = useState(0);\n  const [containerHeight, setHeight] = useState(0);\n\n  const containerRef = useRef(); //memory address containerRef.current\n\n  useEffect(() => {\n    if (containerRef.current) {\n      setWidth(containerRef.current.offsetWidth);\n      setHeight(containerRef.current.offsetHeight);\n    }\n  }, []); // if 2 changes call 1\n\n  const clonedChild = React.cloneElement(children, {\n    width: containerWidth,\n    height: containerHeight,\n  });\n  return (\n    <div className={`svgcontainer ${props.styleName}`} ref={containerRef}>\n      {clonedChild}\n    </div>\n  );\n}\n","import {\n  MapContainer,\n  TileLayer,\n  Polygon,\n  LayerGroup,\n  CircleMarker,\n  LayersControl,\n  useMap,\n  Tooltip,\n} from \"react-leaflet\";\nimport { useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction MonitorView(props) {\n  const map = useMap();\n\n  let matchedFeature = props.wardsAndMonitors.find(\n    (feat) =>\n      feat.name.toUpperCase() === props.selectedWardOrMonitor.toUpperCase()\n  );\n\n  let [centerX, centerY] = [\n    parseFloat(matchedFeature.lat),\n    parseFloat(matchedFeature.lon),\n  ];\n\n  map.setView([centerX, centerY], 14);\n\n  return null;\n}\n\nfunction PanCityView(props) {\n  const map = useMap();\n  map.setView([18.502, 73.853], 12);\n  return null;\n}\n\nfunction Legend({}) {\n  const map = useMap();\n\n  const getColor = (d) => {\n    return d > 35\n      ? \"#800026\"\n      : d > 30\n      ? \"#BD0026\"\n      : d > 25\n      ? \"#E31A1C\"\n      : d > 20\n      ? \"#FEB24C\"\n      : d > 15\n      ? \"#FED976\"\n      : d > 10\n      ? \"#57C7DB\"\n      : d > 5\n      ? \"#90D6E2\"\n      : \"#CAECF1\";\n  };\n\n  useEffect(() => {\n    if (map) {\n      const legend = L.control({ position: \"bottomleft\" });\n\n      legend.onAdd = () => {\n        const div = L.DomUtil.create(\"div\", \"info legend\");\n        const grades = [0, 5, 10, 15, 20, 25, 30, 35];\n        let labels = [];\n        let from;\n        let to;\n\n        labels.push(\"<h5>PM 2.5</h5>\");\n        for (let i = 0; i < grades.length; i++) {\n          from = grades[i];\n          to = grades[i + 1];\n\n          labels.push(\n            '<i style=\"background:' +\n              getColor(from + 1) +\n              '\"></i> ' +\n              from +\n              (to ? \"&ndash;\" + to : \"+\")\n          );\n        }\n        div.innerHTML = labels.join(\"<br>\");\n        return div;\n      };\n\n      legend.addTo(map);\n    }\n  }, [map]);\n  return null;\n}\n\nexport default function ReactMapTool(props) {\n  let features = [];\n  let polygons = [];\n  let iudxMarkers = [];\n  let safarMarkers = [];\n  let mpcbMarkers = [];\n\n  /* WARD POLYGONS */\n  if (props.shapes) {\n    features = props.shapes.features;\n\n    // GEO JSON data is returned with x and y flipped\n    for (let i = 0; i < features.length; i++) {\n      let feat_coordinates = features[i].geometry.coordinates[0];\n      for (let j = 0; j < feat_coordinates.length; j++) {\n        feat_coordinates[j].reverse();\n      }\n    }\n\n    function colorMapper(d) {\n      if (!d) return \"#9c9c9c\";\n      // return d > 30\n      //   ? \"#994C01\"\n      //   : d > 25\n      //   ? \"#C89866\"\n      //   : d > 23\n      //   ? \"#C9E3E7\"\n      //   : d > 20\n      //   ? \"#AAD9E6\"\n      //   : d > 13\n      //   ? \"#80C6E6\"\n      //   : \"#80efff\";\n      return d > 35\n        ? \"#800026\"\n        : d > 30\n        ? \"#BD0026\"\n        : d > 25\n        ? \"#E31A1C\"\n        : d > 20\n        ? \"#FEB24C\"\n        : d > 15\n        ? \"#FED976\"\n        : d > 10\n        ? \"#57C7DB\"\n        : d > 5\n        ? \"#90D6E2\"\n        : \"#CAECF1\";\n    }\n\n    features.forEach((feat, index) => {\n      polygons.push(\n        <Polygon\n          key={index}\n          pathOptions={{\n            color: \"#777\",\n            fillColor: colorMapper(feat.properties.average_daily_pm25),\n            fillOpacity: 0.7,\n          }}\n          positions={feat.geometry.coordinates[0]}\n        >\n          <Tooltip sticky>\n            WARD <br />\n            {feat.properties.name} <br />\n            {feat.properties.name_mr} <br />\n            {\"PM2.5 :  \"}\n            {Number(parseFloat(feat.properties.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </Polygon>\n      );\n    });\n  }\n\n  /* IUDX MONITORS */\n  if (props.monitors) {\n    //1. filter iudx monitors\n    const fillIudx = { color: \"#3885e7\", fillColor: \"#3885e7\" };\n    const fillSafar = { color: \"#c738e7\", fillColor: \"#c738e7\" };\n    const fillmpcb = { color: \"#1eb708\", fillColor: \"#1eb708\" };\n\n    const iudxMonitors = props.monitors.filter(\n      (monitor) => monitor.type === \"iudx\"\n    );\n    iudxMonitors.forEach((mon, index) => {\n      iudxMarkers.push(\n        <CircleMarker\n          key={index}\n          center={[mon.lat, mon.lon]}\n          pathOptions={fillIudx}\n          radius={10}\n        >\n          <Tooltip sticky>\n            IUDX Monitor <br />\n            {mon.name} <br />\n            {\"PM 2.5 :  \"}\n            {Number(parseFloat(mon.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </CircleMarker>\n      );\n    });\n\n    //2. filter safar monitors\n    const safarMonitors = props.monitors.filter(\n      (monitor) => monitor.type === \"safar\"\n    );\n    safarMonitors.forEach((mon, index) => {\n      safarMarkers.push(\n        <CircleMarker\n          key={index}\n          center={[mon.lat, mon.lon]}\n          pathOptions={fillSafar}\n          radius={10}\n        >\n          <Tooltip sticky>\n            Safar Monitor <br /> {mon.name} <br />\n            {\"PM 2.5 :  \"}\n            {Number(parseFloat(mon.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </CircleMarker>\n      );\n    });\n\n    //3. filter MPCB monitors\n    const mpcbMonitors = props.monitors.filter(\n      (monitor) => monitor.type === \"mpcb\"\n    );\n    mpcbMonitors.forEach((mon, index) => {\n      mpcbMarkers.push(\n        <CircleMarker\n          key={index}\n          center={[mon.lat, mon.lon]}\n          pathOptions={fillmpcb}\n          radius={10}\n        >\n          <Tooltip sticky>\n            MPCB Monitor <br /> {mon.name} <br />\n            {\"PM 2.5 :  \"}\n            {Number(parseFloat(mon.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </CircleMarker>\n      );\n    });\n  }\n\n  return (\n    <MapContainer className=\"map_tool\" scrollWheelZoom={false}>\n      {props.panCityView ? (\n        <PanCityView features={features} />\n      ) : (\n        <MonitorView\n          wardsAndMonitors={props.monitors}\n          selectedWardOrMonitor={props.selectedWardOrMonitor}\n        />\n      )}\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {polygons}\n      <LayersControl position=\"bottomright\">\n        <LayersControl.Overlay\n          checked={\n            props.selectedMode.type === \"IUDX\" && !props.panCityView\n              ? true\n              : false\n          }\n          name=\"IUDX Monitors\"\n        >\n          <LayerGroup>{iudxMarkers}</LayerGroup>\n        </LayersControl.Overlay>\n        <LayersControl.Overlay\n          checked={\n            props.selectedMode.type === \"SAFAR\" && !props.panCityView\n              ? true\n              : false\n          }\n          name=\"Safar Monitors\"\n        >\n          <LayerGroup>{safarMarkers}</LayerGroup>\n        </LayersControl.Overlay>\n        <LayersControl.Overlay\n          checked={\n            props.selectedMode.type === \"MPCB\" && !props.panCityView\n              ? true\n              : false\n          }\n          name=\"MPCB Monitors\"\n        >\n          <LayerGroup>{mpcbMarkers}</LayerGroup>\n        </LayersControl.Overlay>\n      </LayersControl>\n      <Legend />\n    </MapContainer>\n  );\n}\n","import * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function InfocardTool(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const num_metrics = 4;\n  const size_per_division = svgWidth / num_metrics;\n  const svgHeight = height;\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20,\n  };\n\n  // DATA to populate CHART\n  //TODO find a better way to handle this issue\n  let summaryData = [];\n  if (props.wardOrMonitorSummary.length > 0) {\n    let record = props.wardOrMonitorSummary[0];\n\n    summaryData = [\n      {\n        index: 0,\n        metric: record.num_missing_days,\n        tag: \"days of missing data\",\n      },\n      {\n        index: 1,\n        metric:\n          record.pollution_rank.toString() + \"/\" + record.num_units.toString(),\n        tag: \"highest pollution\",\n      },\n      {\n        index: 2,\n        metric: record.count_exceeds_threshold,\n        tag: \"number of days exceeding threshold of 20 PM2.5\",\n      },\n    ];\n  }\n\n  console.log(\"SUMMARY RECORD\", summaryData);\n\n  // const data = [\n  //   { index: 0, metric: 15, tag: \"days of missing data\" },\n  //   { index: 1, metric: 10, tag: \"highest pollution\" },\n  //   {\n  //     index: 2,\n  //     metric: 22,\n  //     tag: \"number of days exceeding threshold of 20 aqi\",\n  //   },\n  // ];\n\n  //REF: https://bl.ocks.org/guypursey/f47d8cd11a8ff24854305505dbbd8c07\n  function wrap(text, width) {\n    text.each(function () {\n      var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.1, // ems\n        y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text\n          .text(null)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", y)\n          .attr(\"dy\", dy + \"em\");\n      while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(\" \"));\n        if (tspan.node().getComputedTextLength() > width) {\n          line.pop();\n          tspan.text(line.join(\" \"));\n          line = [word];\n          tspan = text\n            .append(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", y)\n            .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n            .text(word);\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 100;\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"0 0\" + \" \" + svgWidth + \" \" + h);\n\n    const xScale = d3\n      .scaleBand()\n      .domain(\n        summaryData.map(function (d) {\n          return d.index;\n        })\n      )\n      // .scaleLinear()\n      // .domain([0, num_metrics - 1]) // the number of divisions i.e. 3 here is one less than the data range //**\n      .range([size_per_division, width]);\n    // .range([0, svgWidth]);\n\n    if (svgHeight > 0) {\n      //REf : http://bl.ocks.org/ChrisJamesC/4474971\n\n      const x_scale = d3\n        .scaleBand()\n        .domain(\n          summaryData.map(function (d) {\n            return d.tag;\n          })\n        )\n        .range([0, svgWidth])\n        .padding(0.2);\n\n      let xAxis = d3.axisBottom(x_scale);\n\n      svgEl\n        .append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\") // -- for flipping top to bottom\n        .call(xAxis)\n        .selectAll(\".tick text\")\n        .style(\"font-size\", \"18px\")\n        .call(wrap, x_scale.bandwidth());\n\n      /* Y axis */\n      // let yAxis = d3.axisLeft(y_scale);\n      // svgEl.append(\"g\").call(yAxis);\n\n      // // let elem = svgEl.selectAll(\"g myCircleText\").data(data);\n\n      let g = svgEl.append(\"g\");\n      g.selectAll(\"circle\")\n        .data(summaryData) // **\n        .join(\"circle\")\n        .attr(\"cx\", (d) => x_scale(d.tag) + xScale.bandwidth() / 2)\n        .attr(\"cy\", height / 2)\n        .attr(\"r\", (d) => 90)\n        .attr(\"fill\", \"#7df9ff\");\n\n      g.selectAll(\"text\")\n        .data(summaryData) // **\n        .join(\"text\")\n        .attr(\"dx\", (d) =>\n          d.tag === \"highest pollution\"\n            ? x_scale(d.tag) + x_scale.bandwidth() / 2 - 52\n            : x_scale(d.tag) + x_scale.bandwidth() / 2 - 40\n        )\n        .attr(\"dy\", height / 1.8)\n        .text((d) => d.metric)\n        .attr(\"fill\", \"#606161\")\n        .style(\"font-size\", (d) =>\n          d.tag === \"highest pollution\" ? \"40px\" : \"50px\"\n        );\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"vizTitle\">{props.title}</div>\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","import * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function BarchartTool(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const svgHeight = height;\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10,\n  };\n\n  let data = props.rankedWards;\n  //SORTING BY RANK\n  data = data.sort((a, b) => a.best - b.best);\n\n  //REF: https://bl.ocks.org/guypursey/f47d8cd11a8ff24854305505dbbd8c07\n  function wrap(text, width) {\n    text.each(function () {\n      var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.1, // ems\n        y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text\n          .text(null)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", y)\n          .attr(\"dy\", dy + \"em\");\n      while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(\" \"));\n        if (tspan.node().getComputedTextLength() > width) {\n          line.pop();\n          tspan.text(line.join(\" \"));\n          line = [word];\n          tspan = text\n            .append(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", y)\n            .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n            .text(word);\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 20;\n\n    const x_scale = d3\n      .scaleBand()\n      .domain(\n        data.map(function (d) {\n          return d.name;\n        })\n      )\n      .range([0, svgWidth - margin.right])\n      .padding(0.2);\n\n    const y_scale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, (d) => Number(d.Average_pm25))])\n      // .domain([0, 13000])\n      .range([svgHeight, 20]);\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"-30 10\" + \" \" + svgWidth + \" \" + h);\n\n    let xAxis = d3.axisBottom(x_scale);\n\n    if (svgHeight > 0) {\n      /* X axis */\n      svgEl\n        .append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\") // -- for flipping top to bottom\n        .call(xAxis)\n        .selectAll(\".tick text\")\n        .call(wrap, x_scale.bandwidth());\n\n      /* Y axis */\n      let yAxis = d3.axisLeft(y_scale);\n      svgEl.append(\"g\").call(yAxis);\n\n      svgEl\n        .selectAll(\"mybar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function (d) {\n          return x_scale(d.name);\n        })\n        .attr(\"y\", function (d) {\n          return y_scale(Number(d.Average_pm25));\n        })\n        .attr(\"width\", x_scale.bandwidth())\n        .attr(\"height\", function (d) {\n          return svgHeight - y_scale(Number(d.Average_pm25));\n        })\n        .attr(\"fill\", function (d) {\n          return d.best < 4 ? \"#9ad8f5\" : \"#FCC782\";\n        });\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"vizTitle\">{props.title}</div>\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","// import { render } from \"@testing-library/react\";\nimport * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function LinechartTool(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const svgHeight = height;\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 100,\n  };\n\n  let dates = null;\n  let data = null;\n\n  //PAn city view\n  let iudx_data = null;\n  let safar_data = null;\n  let ward_data = null;\n  //ward or monitor view\n  let data_21 = null;\n  let data_22 = null;\n\n  const dataPrep = () => {\n    data = props.pollutantHistory;\n\n    if (props.panCityView) {\n      iudx_data = data.filter((d) => d.type === \"iudx\");\n      safar_data = data.filter((d) => d.type === \"safar\");\n      ward_data = data.filter((d) => d.type === \"ward\");\n      dates = data.map((d) => new Date(d.Month_Year));\n    } else {\n      // for monitor specific view\n      data_21 = data.filter((d) => d.Year === 2021);\n      data_22 = data.filter((d) => d.Year === 2022);\n      dates = data.map((d) => new Date(d.Month_Year));\n    }\n  };\n\n  const renderPanCityView = (svgEl, x_scale, y_scale) => {\n    //IUDX\n    svgEl\n      .append(\"path\")\n      .datum(iudx_data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#D81B60\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            return x_scale(new Date(d.Month_Year));\n          })\n          .y(function (d) {\n            return y_scale(Number(d.monthly_average_pm25));\n          })\n      );\n\n    //SAFAR\n    svgEl\n      .append(\"path\")\n      .datum(safar_data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#1E88E5\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            return x_scale(new Date(d.Month_Year));\n          })\n          .y(function (d) {\n            return y_scale(Number(d.monthly_average_pm25));\n          })\n      );\n\n    svgEl\n      .append(\"path\")\n      .datum(ward_data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#004D40\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            return x_scale(new Date(d.Month_Year));\n          })\n          .y(function (d) {\n            return y_scale(Number(d.monthly_average_pm25));\n          })\n      );\n  };\n\n  const renderMonitorView = (svgEl, x_scale, y_scale) => {\n    //2021\n    svgEl\n      .append(\"path\")\n      .datum(data_21)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"red\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            return x_scale(new Date(d.Month_Year));\n          })\n          .y(function (d) {\n            return y_scale(Number(d.monthly_average_pm25));\n          })\n      );\n\n    //2022\n    svgEl\n      .append(\"path\")\n      .datum(data_22)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"green\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\n        \"d\",\n        d3\n          .line()\n          .x(function (d) {\n            return x_scale(new Date(d.Month_Year));\n          })\n          .y(function (d) {\n            return y_scale(Number(d.monthly_average_pm25));\n          })\n      );\n  };\n\n  useEffect(() => {\n    dataPrep();\n\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 20;\n\n    // X scale\n    const x_scale = d3\n      .scaleTime()\n      .domain(d3.extent(dates))\n      .nice()\n      .range([0, svgWidth - margin.right]);\n    // Y scale\n    const y_scale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, (d) => Number(d.monthly_average_pm25))])\n      .range([svgHeight, 20]);\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"-30 10\" + \" \" + svgWidth + \" \" + h);\n\n    if (svgHeight > 0) {\n      /* X AXIS */\n      svgEl\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\") // -- for flipping top to bottom\n        .call(d3.axisBottom(x_scale));\n\n      /* Y AXIS */\n      svgEl.append(\"g\").call(d3.axisLeft(y_scale));\n\n      // Add the line\n      svgEl\n        .append(\"line\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#D81B60\")\n        .attr(\"stroke-width\", 2.5)\n        .attr({\n          x1: x_scale(d3.min(dates)),\n          y1: y_scale(35), //start of the line\n          x2: x_scale(d3.max(dates)),\n          y2: y_scale(35), //end of the line\n        });\n\n      if (props.panCityView) {\n        renderPanCityView(svgEl, x_scale, y_scale);\n      } else {\n        renderMonitorView(svgEl, x_scale, y_scale);\n      }\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"vizTitle\">{props.title}</div>\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","// import { render } from \"@testing-library/react\";\nimport * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function LinechartToolMonitorHistory(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const svgHeight = height;\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 100,\n  };\n\n  // https://personal.sron.nl/~pault/\n  // Safe for color blindness as well\n  const colorPalette = [\n    \"#4477AA\",\n    \"#EE6677\",\n    \"#228833\",\n    \"#CCBB44\",\n    \"#66CCEE\",\n    \"#AA3377\",\n    \"#BBBBBB\",\n  ];\n\n  let data = null;\n\n  const dataPrep = () => {\n    data = props.pollutantHistory;\n    // console.log(\"data in linechart 2\", data);\n  };\n\n  const renderMonitorView = (svgEl, xScale, yScale) => {\n    const uniqueYears = [...new Set(d3.map(data, (d, i) => d.Year))];\n    for (let yr = 0; yr < uniqueYears.length; yr++) {\n      let data_yr = data.filter((d) => d.Year === uniqueYears[yr]);\n\n      //SORTING\n      data_yr = data_yr.sort((a, b) => a.month_number - b.month_number);\n      // console.log(\"Sorted data\", data_yr);\n\n      svgEl\n        .append(\"path\")\n        .datum(data_yr)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", colorPalette[yr])\n        .attr(\"stroke-width\", 1)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            .x((d) => xScale(d.Month) + xScale.bandwidth() / 2)\n            .y((d) => yScale(Number(d.monthly_average_pm25)))\n        );\n\n      svgEl\n        .append(\"g\")\n        .selectAll(\"circle\")\n        .data(data_yr)\n        .enter()\n        .append(\"circle\")\n        .attr(\"fill\", colorPalette[yr])\n        .attr(\"stroke\", colorPalette[yr])\n        .attr(\"stroke-width\", 1)\n        .attr(\"r\", 3)\n        .attr(\"cx\", (d) => xScale(d.Month) + xScale.bandwidth() / 2)\n        .attr(\"cy\", (d) => yScale(Number(d.monthly_average_pm25)));\n    }\n  };\n\n  useEffect(() => {\n    dataPrep();\n\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 20;\n\n    const X = d3.map(data, (d, i) => d.Month);\n\n    // X scale\n    const xScale = d3.scaleBand(new d3.InternSet(X), [\n      0,\n      svgWidth - margin.right,\n    ]);\n\n    // Y scale\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        d3.min(data, (d) => Number(d.monthly_average_pm25)) - 2,\n        d3.max(data, (d) => Number(d.monthly_average_pm25)),\n      ])\n      .range([svgHeight, 0]);\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"-10 -2\" + \" \" + svgWidth + \" \" + h);\n\n    if (svgHeight > 0) {\n      /* X AXIS */\n      svgEl\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\")\n        .call(d3.axisBottom(xScale));\n      /* Y AXIS */\n      svgEl.append(\"g\").call(d3.axisLeft(yScale));\n\n      renderMonitorView(svgEl, xScale, yScale);\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"vizTitle\">{props.title}</div>\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","import React from \"react\";\nimport * as paths from \"./../paths\";\n\nimport SVGContainer from \"./SVGContainer.js\";\nimport ReactMapTool from \"./vizTools/ReactMapTool.js\";\nimport InfocardTool from \"./vizTools/InfocardTool.js\";\nimport BarchartTool from \"./vizTools/BarchartTool.js\";\nimport LinechartTool from \"./vizTools/LinechartTool.js\";\nimport LinechartToolMonitorHistory from \"./vizTools/LinechartToolMonitorHistory.js\";\n\nexport default class VizPanel extends React.Component {\n  // const [showSVG, setShowSVG] = useState(false); // look up destructuring\n  // function clickHandler() {\n  //     setShowSVG(true);\n  // }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pollutantHistory: [],\n    };\n  }\n\n  async getPollutantHistory() {\n    // retrieving data\n    const url = paths.POLLUTANTHISTORY;\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: null,\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const poll_history = await response.json();\n    console.log(\" * * * * POLLUTANT HISTORY * * * * \", poll_history);\n\n    this.setState({\n      pollutantHistory: poll_history.data,\n      loading: false,\n    });\n  }\n\n  componentDidMount() {\n    this.getPollutantHistory();\n  }\n\n  render() {\n    let units = [];\n    let type = \"WARD\";\n\n    if (this.props.wardPolygons.data !== undefined) {\n      units = this.props.wardPolygons.data.filter(\n        (unit) =>\n          unit.type.toUpperCase() === this.props.selectedMode.type.toUpperCase()\n      );\n      type = this.props.selectedMode.type === \"WARD\" ? \"ward\" : \"monitor\";\n    }\n\n    const ui = (\n      <>\n        <div className=\"text_n_map\">\n          <div className=\"textTool display-linebreak\">\n            {\"This dashboard reports PM 2.5 from various data sources available in Pune. \" +\n              \"The \" +\n              this.props.selectedMode.name +\n              \" data is collected by \" +\n              units.length +\n              \" \" +\n              type +\n              \"s all across Pune.\\n\"}\n            <span style={{ fontStyle: \"italic\" }}>\n              {\" To know more, select your \" +\n                type +\n                \" from the dropdown above.\\n\"}\n            </span>\n            <br />\n            {\n              \"PM 2.5 (particulate matter), an air pollutant, is very harmful to our health. It not only enters our lungs, but can also enter our bloodstream and affect many of our vital organs like the heart, brain and kidneys.\"\n            }\n          </div>\n          <div className=\"mapBaap\">\n            <ReactMapTool\n              panCityView={this.props.panCityView}\n              shapes={this.props.wardPolygons.shapes}\n              monitors={this.props.wardPolygons.data}\n              selectedMode={this.props.selectedMode}\n              selectedWardOrMonitor={this.props.selectedWardOrMonitor}\n            ></ReactMapTool>\n          </div>\n        </div>\n        <div className=\"bar_n_line\">\n          {this.props.panCityView ? (\n            <SVGContainer>\n              <BarchartTool\n                title={\n                  \"Top 3 \" +\n                  (this.props.selectedMode.type === \"WARD\"\n                    ? \"wards\"\n                    : \"monitors\") +\n                  \" showing the lowest to highest levels of pm2.5\"\n                }\n                rankedWards={this.props.rankedWards}\n              ></BarchartTool>\n            </SVGContainer>\n          ) : (\n            <SVGContainer>\n              <InfocardTool\n                title={this.props.selectedWardOrMonitor}\n                selectedMode={this.props.selectedMode}\n                selectedWardOrMonitor={this.props.selectedWardOrMonitor}\n                wardOrMonitorSummary={this.props.wardOrMonitorSummary}\n              />\n            </SVGContainer>\n          )}\n\n          {this.props.panCityView ? (\n            <SVGContainer>\n              <LinechartTool\n                title={\"PM2.5 for PAN CITY VIEW\"}\n                pollutantHistory={this.state.pollutantHistory}\n                panCityView={this.props.panCityView}\n              ></LinechartTool>\n            </SVGContainer>\n          ) : (\n            <SVGContainer>\n              <LinechartToolMonitorHistory\n                title={\n                  \"PM2.5 history for \" +\n                  this.props.selectedMode.type +\n                  \" \" +\n                  this.props.selectedWardOrMonitor\n                }\n                pollutantHistory={this.props.wardOrMonitorHistory}\n                panCityView={this.props.panCityView}\n              ></LinechartToolMonitorHistory>\n            </SVGContainer>\n          )}\n        </div>\n      </>\n    );\n\n    return <div className=\"vizpanel\">{ui}</div>;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/ParisarLogo.a617d95d.png\";","import React from \"react\";\nimport * as paths from \"./../paths\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\nimport Select from \"react-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst dataSources = [\n  { name: \"Satellite Based\", type: \"WARD\" },\n  { name: \"Smart City\", type: \"IUDX\" },\n  { name: \"SAFAR\", type: \"SAFAR\" },\n  { name: \"MPCB\", type: \"MPCB\" },\n];\n\nexport default class ControlPanel extends React.Component {\n  unitSelectRef = null;\n  pollutantSelectRef = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedDataSourceId: 0,\n      filteredMonitors: [],\n      wardsAndMonitors: [],\n      // wardsAndMonitors: [\n      //   { label: \"WARD1\", value: \"WARD1\", type: \"WARD\" },\n      //   { label: \"WARD2\", value: \"WARD2\", type: \"WARD\" },\n      //   { label: \"WARD3\", value: \"WARD3\", type: \"WARD\" },\n      //   { label: \"SAFAR1\", value: \"SAFAR1\", type: \"SAFAR\" },\n      //   { label: \"IUDX1\", value: \"IUDX1\", type: \"IUDX\" },\n      //   { label: \"MPCB1\", value: \"MPCB1\", type: \"MPCB\" },\n      // ],\n    };\n  }\n\n  /* Utility*/\n  async getWardsAndMonitors() {\n    // retrieving data\n    const url = paths.WARDSANDMONITORS;\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: null,\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const wardsAndMonitors = await response.json();\n    console.log(\" * * * * WARDS AND MONITORS * * * * \", wardsAndMonitors);\n\n    this.setState({\n      wardsAndMonitors: wardsAndMonitors.data,\n    });\n\n    return wardsAndMonitors;\n  }\n\n  filterWardsAndMonitors(toFilterBy) {\n    return this.state.wardsAndMonitors.filter(\n      (monitor) => monitor.type === toFilterBy.type\n    );\n  }\n\n  /* * Setters */\n\n  setStartDate = (date) => {\n    this.props.setStartDate(date);\n  };\n\n  setEndDate = (date) => {\n    this.props.setEndDate(date);\n  };\n\n  setSelectedMode = (e, i) => {\n    let selectedMode = dataSources.find((ds) => ds.name === e.target.value);\n    this.props.setSelectedMode(selectedMode);\n\n    /*\n    https://stackoverflow.com/questions/50412843/how-to-programmatically-clear-reset-react-select\n    Only if a selection in the monitor dropdown has been made, clear it when a new datasource is selected\n    because the options will repopulate \n    */\n    if (this.unitSelectRef.state.selectValue.length > 0)\n      this.unitSelectRef.clearValue();\n\n    let filteredMonitors = this.filterWardsAndMonitors(selectedMode);\n\n    this.setState({\n      selectedDataSourceId: i,\n      filteredMonitors: filteredMonitors,\n    });\n  };\n\n  setSelectedWardOrMonitor = (e) => {\n    this.props.setSelectedWardOrMonitor(e);\n    this.props.handlePanCityView();\n  };\n\n  /* * * Lifecycle hooks */\n  componentDidMount() {\n    //This handles the data selection bug from DatePicker react widget\n    if (this.state.startDate) {\n      this.state.startDate.setHours(\n        (+1 * this.state.startDate.getTimezoneOffset()) / 60\n      );\n    }\n    // const dataSources = [\"WARD\", \"IUDX\", \"SAFAR\", \"MPCB\"];\n\n    //TESTING\n    // let wnm = this.state.wardsAndMonitors;\n    // let filteredMonitors = this.filterWardsAndMonitors(\n    //   dataSources[this.state.selectedDataSourceId]\n    // );\n    // this.setState({\n    //   filteredMonitors: filteredMonitors,\n    // });\n\n    //FETCHING FROM SERVER\n    let wnm = this.getWardsAndMonitors();\n    wnm.then((value) => {\n      let filteredMonitors = this.filterWardsAndMonitors(\n        dataSources[this.state.selectedDataSourceId]\n      );\n      this.setState({\n        filteredMonitors: filteredMonitors,\n      });\n    });\n  }\n\n  render() {\n    const buttons = (\n      <>\n        {dataSources.map((ds, i) => (\n          <Button\n            key={i}\n            style={{ fontSize: \"12px\" }}\n            value={ds.name}\n            onClick={(event) => this.setSelectedMode(event, i)}\n            active={i === this.state.selectedDataSourceId ? true : false}\n          >\n            {ds.name}\n          </Button>\n        ))}\n      </>\n    );\n\n    return (\n      <div>\n        <div className=\"controlpanel\">\n          <div className=\"controlPanelSection1\">\n            {this.props.panCityView ? (\n              <div className=\"panCityControl\" style={{ zIndex: 999 }}>\n                <ButtonGroup size=\"sm\" className=\"cp-section1items\">\n                  {buttons}\n                </ButtonGroup>\n                <Select\n                  ref={(ref) => {\n                    this.unitSelectRef = ref;\n                  }}\n                  className=\"cp-section1items datasource-select\"\n                  placeholder=\"Select a ward or monitor\"\n                  options={this.state.filteredMonitors}\n                  onChange={this.setSelectedWardOrMonitor}\n                />\n              </div>\n            ) : (\n              <div className=\"panCityControl\">\n                <Button variant=\"link\" onClick={this.props.handlePanCityView}>\n                  PUNE\n                </Button>\n                <div>\n                  {/* {\"Selected \"}\n                  {this.state.selectedDataSourceId === 0\n                    ? \"ward : \"\n                    : dataSources[this.state.selectedDataSourceId] +\n                      \" monitor : \"} */}\n                  {\"/ \" +\n                    dataSources[this.state.selectedDataSourceId].type +\n                    \"  : \" +\n                    this.props.selectedWardOrMonitor}\n                </div>\n              </div>\n            )}\n\n            <Select\n              ref={(ref) => {\n                this.pollutantSelectRef = ref;\n              }}\n              className=\"cp-section1items\"\n              placeholder=\"Select a pollutant\"\n            />\n          </div>\n\n          <div className=\"controlPanelSection2\">\n            <DatePicker\n              wrapperClassName=\"cp-section2items\"\n              dateFormat=\"yyyy/MM/dd\"\n              selected={this.props.startDate}\n              onChange={(date) => this.setStartDate(date)}\n            />\n            <label className=\"cp-section2items\"> - </label>\n            <DatePicker\n              wrapperClassName=\"cp-section2items\"\n              dateFormat=\"yyyy/MM/dd\"\n              selected={this.props.endDate}\n              onChange={(date) => this.setEndDate(date)}\n            />\n            <Button\n              variant=\"dark\"\n              size=\"sm\"\n              className=\"cp-section2items\"\n              onClick={this.props.updateDates}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nexport const Faq = (props) => {\n  const [fullscreen, setFullscreen] = useState(true);\n  const [show, setShow] = useState(false);\n\n  function handleShow(breakpoint) {\n    setFullscreen(breakpoint);\n    setShow(true);\n  }\n\n  return (\n    <div>\n      <Button\n        style={{\n          color: \"#606161\",\n          backgroundColor: \"#F8F9F9\",\n          borderColor: \"#F8F9F9\",\n        }}\n        onClick={() => handleShow(true)}\n      >\n        FAQs\n      </Button>\n      <Modal show={show} fullscreen={fullscreen} onHide={() => setShow(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Frequently Asked Questions</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>What is Air Quality Index (AQI)? </h4>\n          <p>\n            The Air Quality Index is a way of measuring air pollution, by taking\n            into account the presence of different pollutants in air like\n            particulate matter (PM 2.5, PM 10), Ozone, CO, SOx and NOx. In\n            India, we follow a 500 point scale to show the degree of air\n            pollution and take into account 5 major pollutants namely PM2.5,\n            PM10, CO, Ozone and NO2.\n          </p>\n          <h4>Is Pune's air polluted?</h4>{\" \"}\n          <p>\n            Pune is one of the 132 nonattainment cities declared under the\n            National Clean Air Programme. This means that the air quality in\n            Pune does not conform to the National Ambient Air Quality Standards\n            prescribed by the Central Board of Pollution Control. The National\n            Clean Air Programme was launched in 2019 by the Ministry of\n            Environment, Forest and Climate Change, which made it mandatory for\n            the nonattainment cities to prepare air action plans. The objective\n            of these plans was to reduce the PM 2.5 pollution by 30-40% till\n            2024 (with 2017 as the base). Accordingly, Pune has prepared an air\n            action plan, and is currently being implemented.{\" \"}\n          </p>\n          <h4>Where is all this data coming from? </h4>\n          <p>\n            The dashboard displays air quality data from four sources, as\n            follows\n            <ul>\n              <li>\n                Satellite based data - This data is being plugged in from the\n                Blue Sky Analytics, capturing PM 2.5 data based on a grid of 1km\n                x 1km. This data is being used to create the base map of Pune\n                constituting the 41 administrative wards.\n              </li>\n              <li>\n                Pune Smart City Monitors - The data from 50 low cost monitors,\n                spread all over Pune, is being displayed. While the dashboard\n                only shows PM 2.5 readings, these monitors capture a range of\n                other pollutants like PM 10, sulphur dioxide , nitrogen dioxide,\n                carbon monoxide and ozone.{\" \"}\n              </li>\n              <li>\n                SAFAR - Short for System of Air Quality and Weather Forecasting\n                And Research, this application provides data from seven monitors\n                installed by the Institute of Tropical Meteorology in Pune. This\n                data is used by the Pune Municipal Corporation to prepare its\n                Environmental Status Report every year. Apart from PM 2.5, which\n                is being displayed on this dashboard, these monitors capture\n                pollutants like PM 10 and Ozone.\n              </li>{\" \"}\n              <li>\n                MPCB - Short for Maharashtra Pollution Control Board, this data\n                is captured by the five monitors set up by the board in Pune.\n                Apart from PM2.5, these monitors capture data on other\n                pollutants, namely SOx, NOx and PM 10.\n              </li>\n            </ul>\n          </p>\n          <h4>Why focus on PM 2.5?</h4>{\" \"}\n          <p>\n            While air pollution affects our health, particulate matter pollution\n            is most hazardous. These minute particles not only enter and damage\n            our lungs, but can also enter the bloodstream, thereby affecting\n            other vital organs like the heart, kidney and even the brain.\n            Increased exposure to high PM 2.5 levels can cause asthma, chronic\n            obstructive pulmonary disorder, bronchitis, heart disease,\n            alzheimers, kidney disorders and so on. Where does PM 2.5 come from?\n            Main sources of PM 2.5 in urban areas are vehicular emissions, coal/\n            natural gas fired power plants, and burning.{\" \"}\n          </p>\n          <h4>What is being done to improve Pune's air quality? </h4>\n          <p>\n            Pune has prepared the Air Action Plan as mandated by the NCAP. The\n            plan has different actions related to transport, waste management,\n            greening etc to improve air quality.\n          </p>\n          <h4>What can you do with this dashboard?</h4>\n          <p>\n            This dashboard is a tool to understand air pollution in Pune in a\n            simple manner. The variety of data sources allows you to find out\n            ward specific pollution, something which can be taken up with your\n            local corporator or PMC in order to improve air quality. The\n            dashboard can also be used as a learning tool by different schools\n            to introduce and understand the issue of air pollution.\n          </p>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nexport const Contact = () => {\n  const [lgShow, setLgShow] = useState(false);\n\n  return (\n    <>\n      <Button\n        style={{\n          color: \"#606161\",\n          backgroundColor: \"#F8F9F9\",\n          borderColor: \"#F8F9F9\",\n        }}\n        onClick={() => setLgShow(true)}\n      >\n        Contact Us\n      </Button>\n      <Modal\n        size=\"lg\"\n        show={lgShow}\n        onHide={() => setLgShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-modal-sizes-title-lg\">\n            Reach out to us\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Please send us your questions{\" \"}\n          <a\n            href=\"https://parisar.org/contact-us\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            here\n          </a>\n          .\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n","/*\nControls the side control panel and the viz Panel\n*/\nimport React from \"react\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as paths from \"./paths\";\n\nimport VizPanel from \"./visualizationPanel/VizPanel.js\";\nimport logo from \"./assets/ParisarLogo.png\";\n\nimport { Nav, Navbar, Container, Alert } from \"react-bootstrap\";\n\nimport ControlPanel from \"./controlPanel/ControlPanel\";\nimport { Faq } from \"./routes/Faq\";\nimport { Contact } from \"./routes/Contact\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMode: { name: \"Satellite Based\", type: \"WARD\" },\n      selectedWardOrMonitor: \"\",\n      panCityView: true,\n      wardOrMonitorHistory: [],\n      wardOrMonitorSummary: [],\n      wardPolygons: [],\n      rankedWards: [],\n      startDate: new Date(\"2021-04-24\"),\n      endDate: new Date(),\n      alert: {\n        alertRaised: false,\n        alertMessage: \"\",\n      },\n    };\n  }\n\n  updateDates = (e) => {\n    // Fetching NEW data according to UPDATED DATES\n    this.get_pm25Ranks();\n    if (this.state.selectedWardOrMonitor !== \"\") {\n      this.getWardOrMonitorHistory();\n      this.getWardOrMonitorSummary();\n    }\n  };\n\n  // Get top 3 and bottom 3 ranks for pollutants\n  async get_pm25Ranks() {\n    let message = \"\";\n\n    const payload = {\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      selectedMode: this.state.selectedMode.type,\n    };\n\n    // retrieving data\n    const url = paths.RANKEDUNITS;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const responseObject = await response.json();\n    console.log(\n      \" * * * * Ranked \" +\n        this.state.selectedMode.name +\n        \" received from db * * * * \",\n      responseObject\n    );\n\n    if (responseObject.status === \"success\") {\n      this.setState({\n        rankedWards: responseObject.data,\n      });\n    } else {\n      if (responseObject.message === \"No data found in DB\") {\n        message =\n          \"Sorry! We do not have the data for the selected date ranges. Please try changing them.\";\n      }\n\n      this.setState({\n        alert: {\n          alertMessage: message,\n          alertRaised: true,\n        },\n      });\n    }\n  }\n\n  async getWardOrMonitorHistory() {\n    let message = \"\";\n\n    const payload = {\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      selectedMode: this.state.selectedMode.type,\n      selectedWardOrMonitor: this.state.selectedWardOrMonitor,\n    };\n\n    // retrieving data\n    const url = paths.WARDORMONITORHISTORY;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n    //processing retrieved data\n    const responseObject = await response.json();\n    console.log(\n      \" * * * * History for \" +\n        payload.selectedMode +\n        payload.selectedWardOrMonitor +\n        \" received from db * * * * \",\n      responseObject\n    );\n\n    if (responseObject.status === \"success\") {\n      this.setState({\n        wardOrMonitorHistory: responseObject.data,\n      });\n    } else {\n      if (responseObject.message === \"No data found in DB\") {\n        message =\n          \"Sorry! We do not have the data for the selected monitor or ward or the date ranges. Please try changing them.\";\n      }\n\n      this.setState({\n        alert: {\n          alertMessage: message,\n          alertRaised: true,\n        },\n      });\n    }\n  }\n\n  async getWardPolygons() {\n    let wardPolygons = this.state.wardPolygons;\n    if (this.state.wardPolygons.length !== 101) {\n      // TODO get this date from UI components\n      let today = new Date(\"2021-06-06\");\n      const payload = {\n        date1: today.toISOString().split(\"T\")[0],\n        categories: [\"iudx\", \"safar\", \"ward\", \"mpcb\"],\n      };\n\n      // retrieving data\n      const url = paths.WARDPOLYGONS;\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      };\n      const response = await fetch(url, requestOptions);\n\n      //processing retrieved data\n      wardPolygons = await response.json();\n      console.log(\n        \" * * * * POLYGONS with pollutants received from db * * * * \",\n        wardPolygons\n      );\n    }\n\n    this.setState({\n      wardPolygons: wardPolygons,\n    });\n  }\n\n  async getWardOrMonitorSummary() {\n    let message = \"\";\n\n    const payload = {\n      startDate: this.state.startDate.toISOString().split(\"T\")[0], // getting a MYSQL date truncate issue if date not formatted this way\n      endDate: this.state.endDate.toISOString().split(\"T\")[0],\n      selectedMode: this.state.selectedMode.type,\n      selectedWardOrMonitor: this.state.selectedWardOrMonitor,\n    };\n\n    // retrieving data\n    const url = paths.WARDORMONITORSUMMARY;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const responseObject = await response.json();\n    console.log(\n      \" * * * * Summary for \" +\n        this.state.selectedWardOrMonitor +\n        \" received from db * * * * \",\n      responseObject\n    );\n\n    if (responseObject.status === \"success\") {\n      this.setState({\n        wardOrMonitorSummary: responseObject.data, // only 1 record is always returned\n      });\n    } else {\n      if (responseObject.message === \"No data found in DB\") {\n        message =\n          \"Sorry! We do not have the data for the selected date ranges. Please try changing them.\";\n      }\n\n      this.setState({\n        alert: {\n          alertMessage: message,\n          alertRaised: true,\n        },\n      });\n    }\n  }\n\n  /*\n   * FETCHING DATA FROM API\n   * This is where all the api calls are made to get data from the server\n   */\n  componentDidMount() {\n    // HORIZONTAL BAR CHART TOOL\n    this.get_pm25Ranks();\n    // MAPTOOL\n    this.getWardPolygons();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // TODO get this verified\n    // Fetching NEW data according to UPDATED SELECTED MODE\n    if (this.state.selectedMode !== prevState.selectedMode) {\n      this.get_pm25Ranks();\n    }\n    if (\n      this.state.selectedWardOrMonitor !== prevState.selectedWardOrMonitor &&\n      this.state.selectedWardOrMonitor !== \"\"\n    ) {\n      this.getWardOrMonitorHistory();\n      this.getWardOrMonitorSummary();\n    }\n  }\n\n  handleAlerts = (status) => {\n    this.setState({\n      alert: {\n        alertMessage: \"\",\n        alertRaised: status,\n      },\n    });\n  };\n\n  handlePanCityView = () => {\n    this.setState({\n      panCityView: !this.state.panCityView,\n    });\n  };\n\n  setSelectedWardOrMonitor = (e) => {\n    this.setState({\n      selectedWardOrMonitor: e.value,\n    });\n  };\n  render() {\n    const content = (\n      <>\n        {this.state.alert.alertRaised ? (\n          <Alert\n            variant=\"danger\"\n            onClose={() => this.handleAlerts(false)}\n            dismissible\n          >\n            <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n            <p>{this.state.alert.alertMessage}</p>\n          </Alert>\n        ) : null}\n        <ControlPanel\n          panCityView={this.state.panCityView}\n          updateDates={this.updateDates}\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n          selectedWardOrMonitor={this.state.selectedWardOrMonitor}\n          setSelectedMode={(selectedMode) => {\n            this.setState({\n              selectedMode: selectedMode,\n              selectedWardOrMonitor: \"\",\n            });\n          }}\n          setSelectedWardOrMonitor={this.setSelectedWardOrMonitor}\n          handlePanCityView={this.handlePanCityView}\n          // getWardOrMonitorHistory={this.getWardOrMonitorHistory.bind(this)}\n          setStartDate={(date) => this.setState({ startDate: date })}\n          setEndDate={(date) => this.setState({ endDate: date })}\n        />\n        {false ? (\n          \"Retrieving data . . .\"\n        ) : (\n          <VizPanel\n            startDate={this.state.startDate}\n            endDate={this.state.endDate}\n            selectedMode={this.state.selectedMode}\n            panCityView={this.state.panCityView}\n            selectedWardOrMonitor={this.state.selectedWardOrMonitor}\n            rankedWards={this.state.rankedWards}\n            wardOrMonitorHistory={this.state.wardOrMonitorHistory}\n            wardOrMonitorSummary={this.state.wardOrMonitorSummary}\n            wardPolygons={this.state.wardPolygons}\n          />\n        )}\n      </>\n    );\n\n    return (\n      <div className=\"parentdiv\">\n        <Navbar bg=\"light\">\n          <Container>\n            <Navbar.Brand>\n              <img alt=\"\" src={logo} className=\"logo\" />\n              <span className=\"websiteName\">{\"Air Quality Dashboard\"}</span>\n            </Navbar.Brand>\n            <Nav className=\"justify-content-end\">\n              <Faq />\n              <Contact />\n            </Nav>\n          </Container>\n        </Navbar>\n        <div className=\"content\">{content}</div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["paths.js","visualizationPanel/SVGContainer.js","visualizationPanel/vizTools/ReactMapTool.js","visualizationPanel/vizTools/InfocardTool.js","visualizationPanel/vizTools/BarchartTool.js","visualizationPanel/vizTools/LinechartToolMonitorHistory.js","visualizationPanel/VizPanel.js","assets/ParisarLogo.png","controlPanel/ControlPanel.js","assets/faqs.csv","routes/Faq.js","routes/Contact.js","App.js","index.js"],"names":["API","RANKEDUNITS","concat","WARDORMONITORHISTORY","WARDPOLYGONS","WARDORMONITORSUMMARY","WARDSANDMONITORS","POLLUTANTHISTORY","SVGContainer","props","children","useState","containerWidth","setWidth","containerHeight","setHeight","containerRef","useRef","useEffect","current","offsetWidth","offsetHeight","clonedChild","React","cloneElement","width","height","className","styleName","ref","MonitorView","map","useMap","matchedFeature","wardsAndMonitors","find","feat","name","toUpperCase","selectedWardOrMonitor","parseFloat","lat","lon","centerX","centerY","setView","PanCityView","Legend","getColor","d","legend","L","control","position","onAdd","from","to","div","DomUtil","create","grades","gradeNames","labels","push","i","length","innerHTML","join","addTo","ReactMapTool","features","polygons","iudxMarkers","safarMarkers","mpcbMarkers","shapes","feat_coordinates","geometry","coordinates","j","reverse","forEach","index","Polygon","pathOptions","color","fillColor","properties","average_daily_pm25","fillOpacity","positions","Tooltip","sticky","name_mr","Number","toFixed","monitors","fillIudx","fillSafar","fillmpcb","filter","monitor","type","mon","CircleMarker","center","radius","MapContainer","scrollWheelZoom","panCityView","TileLayer","attribution","url","LayersControl","Overlay","checked","selectedMode","LayerGroup","InfocardTool","svgRef","svgWidth","size_per_division","svgHeight","summaryData","wardOrMonitorSummary","record","metric","num_missing_days","tag","pollution_rank","toString","num_units","count_exceeds_threshold","wrap","text","each","word","d3","this","words","split","line","lineNumber","y","attr","dy","tspan","append","pop","node","getComputedTextLength","svgEl","selectAll","remove","h","xScale","domain","range","x_scale","padding","xAxis","call","style","bandwidth","g","data","title","BarchartTool","margin","rankedWards","legendInfo","label","sort","a","b","best","y_scale","Average_pm25","yAxis","enter","xLeg_Scale","Object","keys","renderLegend","LinechartToolMonitorHistory","monthOrder","colorPalette","yAxisLabel","pollutantHistory","X","Month","yScale","monthly_average_pm25","uniqueYears","Set","Year","yr","data_yr","month_number","datum","x","renderMonitorView","divisions","VizPanel","state","units","undefined","wardPolygons","unit","ui","fontStyle","wardOrMonitorHistory","Component","dataSources","ControlPanel","unitSelectRef","pollutantSelectRef","setStartDate","date","setEndDate","setSelectedMode","e","ds","target","value","selectValue","clearValue","filteredMonitors","filterWardsAndMonitors","setState","selectedDataSourceId","setSelectedWardOrMonitor","handlePanCityView","paths","requestOptions","method","headers","body","fetch","response","json","console","log","toFilterBy","startDate","setHours","getTimezoneOffset","getWardsAndMonitors","then","buttons","Button","fontSize","onClick","event","active","zIndex","ButtonGroup","size","isSearchable","placeholder","options","onChange","variant","wrapperClassName","dateFormat","selected","endDate","updateDates","Faq","fullscreen","setFullscreen","show","setShow","faqs","setFaqs","getFaqs","faqComponents","f","bullets","k","includes","question","align","answer","ind","backgroundColor","borderColor","Modal","onHide","Header","closeButton","Title","Body","Contact","lgShow","setLgShow","library","add","faInstagram","faFacebook","faTwitter","display","id","flex","href","rel","icon","fixedWidth","App","get_pm25Ranks","getWardOrMonitorHistory","getWardOrMonitorSummary","handleAlerts","status","alert","alertMessage","alertRaised","Date","message","payload","JSON","stringify","responseObject","poll_history","loading","today","date1","toISOString","categories","getWardPolygons","getPollutantHistory","prevProps","prevState","content","Alert","onClose","dismissible","Heading","Navbar","bg","Container","Brand","alt","src","logo","Nav","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c29fe3f.chunk.js","sourcesContent":["export const API = \"https://server2.nikhilvj.co.in/airdata_api/API/\";\n// export const API = \"http://localhost:5600/API/\";\n\nexport const RANKEDUNITS = API.concat(\"rankedPm25Units\");\n\nexport const WARDORMONITORHISTORY = API.concat(\"getWardOrMonitorHistory\");\nexport const WARDPOLYGONS = API.concat(\"wardPolygons\");\nexport const WARDORMONITORSUMMARY = API.concat(\"wardOrMonitorSummary\");\n\nexport const WARDSANDMONITORS = API.concat(\"wardsAndMonitors\");\nexport const POLLUTANTHISTORY = API.concat(\"pollutantHistory\");\n\nexport const WARDCENTROIDS = API.concat(\"wardCentroids\");\n","import React, { useEffect, useRef, useState } from \"react\";\n\nexport default function SVGContainer(props) {\n  const { children } = props;\n\n  const [containerWidth, setWidth] = useState(0);\n  const [containerHeight, setHeight] = useState(0);\n\n  const containerRef = useRef(); //memory address containerRef.current\n\n  useEffect(() => {\n    if (containerRef.current) {\n      setWidth(containerRef.current.offsetWidth);\n      setHeight(containerRef.current.offsetHeight);\n    }\n  }, []); // if 2 changes call 1\n\n  const clonedChild = React.cloneElement(children, {\n    width: containerWidth,\n    height: containerHeight,\n  });\n  return (\n    <div className={`svgcontainer ${props.styleName}`} ref={containerRef}>\n      {clonedChild}\n    </div>\n  );\n}\n","import {\n  MapContainer,\n  TileLayer,\n  Polygon,\n  LayerGroup,\n  CircleMarker,\n  LayersControl,\n  useMap,\n  Tooltip,\n} from \"react-leaflet\";\nimport { useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction MonitorView(props) {\n  const map = useMap();\n\n  let matchedFeature = props.wardsAndMonitors.find(\n    (feat) =>\n      feat.name.toUpperCase() === props.selectedWardOrMonitor.toUpperCase()\n  );\n\n  let [centerX, centerY] = [\n    parseFloat(matchedFeature.lat),\n    parseFloat(matchedFeature.lon),\n  ];\n\n  map.setView([centerX, centerY], 14);\n\n  return null;\n}\n\nfunction PanCityView(props) {\n  const map = useMap();\n  map.setView([18.502, 73.853], 12);\n  return null;\n}\n\nfunction Legend({}) {\n  const map = useMap();\n\n  const getColor = (d) => {\n    // return d > 35\n    //   ? \"#800026\"\n    //   : d > 30\n    //   ? \"#BD0026\"\n    //   : d > 25\n    //   ? \"#E31A1C\"\n    //   : d > 20\n    //   ? \"#FEB24C\"\n    //   : d > 15\n    //   ? \"#FED976\"\n    //   : d > 10\n    //   ? \"#57C7DB\"\n    //   : d > 5\n    //   ? \"#90D6E2\"\n    //   : \"#CAECF1\";\n    if (!d) return \"#ededed\";\n    return d > 250\n      ? \"#810100\"\n      : d > 120\n      ? \"#c41206\"\n      : d > 90\n      ? \"#f58f09\"\n      : d > 60\n      ? \"#CCA88A\"\n      : d > 30\n      ? \"#1E5E64\"\n      : \"#50C3CD\";\n  };\n\n  useEffect(() => {\n    if (map) {\n      const legend = L.control({ position: \"bottomleft\" });\n\n      legend.onAdd = () => {\n        const div = L.DomUtil.create(\"div\", \"info legend\");\n        const grades = [\"NA\", 0, 30, 60, 90, 120, 250];\n        const gradeNames = [\n          \"Not Available\",\n          \"Good\",\n          \"Satisfactory\",\n          \"Moderate\",\n          \"Poor\",\n          \"Very Poor\",\n          \"Severe\",\n        ];\n        let labels = [];\n        let from;\n        let to;\n\n        labels.push(\"<h5>PM 2.5</h5>\");\n        for (let i = 0; i < grades.length; i++) {\n          from = grades[i];\n          to = grades[i + 1];\n\n          if (grades[i] === \"NA\") {\n            labels.push(\n              '<i style=\"background:' +\n                getColor(null) +\n                '\"></i> ' +\n                from +\n                \" : &nbsp;&nbsp;\" +\n                gradeNames[i]\n            );\n          } else {\n            labels.push(\n              '<i style=\"background:' +\n                getColor(from + 1) +\n                '\"></i> ' +\n                from +\n                (to ? \"&ndash;\" + to : \"+\") +\n                \"&nbsp;&nbsp;\" +\n                gradeNames[i]\n            );\n          }\n        }\n        div.innerHTML = labels.join(\"<br>\");\n        return div;\n      };\n\n      legend.addTo(map);\n    }\n  }, [map]);\n  return null;\n}\n\nexport default function ReactMapTool(props) {\n  let features = [];\n  let polygons = [];\n  let iudxMarkers = [];\n  let safarMarkers = [];\n  let mpcbMarkers = [];\n\n  /* WARD POLYGONS */\n  if (props.shapes) {\n    features = props.shapes.features;\n\n    // GEO JSON data is returned with x and y flipped\n    for (let i = 0; i < features.length; i++) {\n      let feat_coordinates = features[i].geometry.coordinates[0];\n      for (let j = 0; j < feat_coordinates.length; j++) {\n        feat_coordinates[j].reverse();\n      }\n    }\n\n    function colorMapper(d) {\n      if (!d) return \"#ededed\";\n      return d > 250\n        ? \"#810100\"\n        : d > 120\n        ? \"#c41206\"\n        : d > 90\n        ? \"#f58f09\"\n        : d > 60\n        ? \"#CCA88A\"\n        : d > 30\n        ? \"#1E5E64\"\n        : \"#50C3CD\";\n    }\n\n    features.forEach((feat, index) => {\n      polygons.push(\n        <Polygon\n          key={index}\n          pathOptions={{\n            color: \"#777\",\n            fillColor: colorMapper(feat.properties.average_daily_pm25),\n            fillOpacity: 0.5,\n          }}\n          positions={feat.geometry.coordinates[0]}\n        >\n          <Tooltip sticky>\n            WARD <br />\n            {feat.properties.name} <br />\n            {feat.properties.name_mr} <br />\n            {\"PM2.5 :  \"}\n            {Number(parseFloat(feat.properties.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </Polygon>\n      );\n    });\n  }\n\n  /* IUDX MONITORS */\n  if (props.monitors) {\n    //1. filter iudx monitors\n    const fillIudx = { color: \"#3885e7\", fillColor: \"#3885e7\" };\n    const fillSafar = { color: \"#c738e7\", fillColor: \"#c738e7\" };\n    const fillmpcb = { color: \"#1eb708\", fillColor: \"#1eb708\" };\n\n    const iudxMonitors = props.monitors.filter(\n      (monitor) => monitor.type === \"iudx\"\n    );\n    iudxMonitors.forEach((mon, index) => {\n      iudxMarkers.push(\n        <CircleMarker\n          key={index}\n          center={[mon.lat, mon.lon]}\n          pathOptions={fillIudx}\n          radius={10}\n        >\n          <Tooltip sticky>\n            IUDX Monitor <br />\n            {mon.name} <br />\n            {\"PM 2.5 :  \"}\n            {Number(parseFloat(mon.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </CircleMarker>\n      );\n    });\n\n    //2. filter safar monitors\n    const safarMonitors = props.monitors.filter(\n      (monitor) => monitor.type === \"safar\"\n    );\n    safarMonitors.forEach((mon, index) => {\n      safarMarkers.push(\n        <CircleMarker\n          key={index}\n          center={[mon.lat, mon.lon]}\n          pathOptions={fillSafar}\n          radius={10}\n        >\n          <Tooltip sticky>\n            Safar Monitor <br /> {mon.name} <br />\n            {\"PM 2.5 :  \"}\n            {Number(parseFloat(mon.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </CircleMarker>\n      );\n    });\n\n    //3. filter MPCB monitors\n    const mpcbMonitors = props.monitors.filter(\n      (monitor) => monitor.type === \"mpcb\"\n    );\n    mpcbMonitors.forEach((mon, index) => {\n      mpcbMarkers.push(\n        <CircleMarker\n          key={index}\n          center={[mon.lat, mon.lon]}\n          pathOptions={fillmpcb}\n          radius={10}\n        >\n          <Tooltip sticky>\n            MPCB Monitor <br /> {mon.name} <br />\n            {\"PM 2.5 :  \"}\n            {Number(parseFloat(mon.average_daily_pm25)).toFixed(2)}\n          </Tooltip>\n        </CircleMarker>\n      );\n    });\n  }\n\n  return (\n    <MapContainer className=\"map_tool\" scrollWheelZoom={false}>\n      {props.panCityView ? (\n        <PanCityView features={features} />\n      ) : (\n        <MonitorView\n          wardsAndMonitors={props.monitors}\n          selectedWardOrMonitor={props.selectedWardOrMonitor}\n        />\n      )}\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {polygons}\n      <LayersControl position=\"bottomright\">\n        <LayersControl.Overlay\n          checked={props.selectedMode.type === \"IUDX\" ? true : false}\n          name=\"Smart City Monitors\"\n        >\n          <LayerGroup>{iudxMarkers}</LayerGroup>\n        </LayersControl.Overlay>\n        <LayersControl.Overlay\n          checked={props.selectedMode.type === \"SAFAR\" ? true : false}\n          name=\"Safar Monitors\"\n        >\n          <LayerGroup>{safarMarkers}</LayerGroup>\n        </LayersControl.Overlay>\n        <LayersControl.Overlay\n          checked={props.selectedMode.type === \"MPCB\" ? true : false}\n          name=\"MPCB Monitors\"\n        >\n          <LayerGroup>{mpcbMarkers}</LayerGroup>\n        </LayersControl.Overlay>\n      </LayersControl>\n      <Legend />\n    </MapContainer>\n  );\n}\n","import * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function InfocardTool(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const num_metrics = 4;\n  const size_per_division = svgWidth / num_metrics;\n  const svgHeight = height;\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20,\n  };\n\n  // DATA to populate CHART\n  //TODO find a better way to handle this issue\n  let summaryData = [];\n  if (props.wardOrMonitorSummary.length > 0) {\n    let record = props.wardOrMonitorSummary[0];\n\n    summaryData = [\n      {\n        index: 0,\n        metric: record.num_missing_days,\n        tag: \"days of missing data\",\n      },\n      {\n        index: 1,\n        metric:\n          record.pollution_rank.toString() + \"/\" + record.num_units.toString(),\n        tag: \"Pollution Rank\",\n      },\n      {\n        index: 2,\n        metric: record.count_exceeds_threshold,\n        tag: \"number of days exceeding threshold of 30 PM2.5\",\n      },\n    ];\n  }\n\n  // console.log(\"SUMMARY RECORD\", summaryData);\n\n  // const data = [\n  //   { index: 0, metric: 15, tag: \"days of missing data\" },\n  //   { index: 1, metric: 10, tag: \"highest pollution\" },\n  //   {\n  //     index: 2,\n  //     metric: 22,\n  //     tag: \"number of days exceeding threshold of 20 aqi\",\n  //   },\n  // ];\n\n  //REF: https://bl.ocks.org/guypursey/f47d8cd11a8ff24854305505dbbd8c07\n  function wrap(text, width) {\n    text.each(function () {\n      var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.1, // ems\n        y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text\n          .text(null)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", y)\n          .attr(\"dy\", dy + \"em\");\n      while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(\" \"));\n        if (tspan.node().getComputedTextLength() > width) {\n          line.pop();\n          tspan.text(line.join(\" \"));\n          line = [word];\n          tspan = text\n            .append(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", y)\n            .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n            .text(word);\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 100;\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"0 0\" + \" \" + svgWidth + \" \" + h);\n\n    const xScale = d3\n      .scaleBand()\n      .domain(\n        summaryData.map(function (d) {\n          return d.index;\n        })\n      )\n      // .scaleLinear()\n      // .domain([0, num_metrics - 1]) // the number of divisions i.e. 3 here is one less than the data range //**\n      .range([size_per_division, width]);\n    // .range([0, svgWidth]);\n\n    if (svgHeight > 0) {\n      //REf : http://bl.ocks.org/ChrisJamesC/4474971\n\n      const x_scale = d3\n        .scaleBand()\n        .domain(\n          summaryData.map(function (d) {\n            return d.tag;\n          })\n        )\n        .range([0, svgWidth])\n        .padding(0.2);\n\n      let xAxis = d3.axisBottom(x_scale);\n\n      svgEl\n        .append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\") // -- for flipping top to bottom\n        .call(xAxis)\n        .selectAll(\".tick text\")\n        .style(\"font-size\", \"18px\")\n        .call(wrap, x_scale.bandwidth());\n\n      /* Y axis */\n      // let yAxis = d3.axisLeft(y_scale);\n      // svgEl.append(\"g\").call(yAxis);\n\n      // // let elem = svgEl.selectAll(\"g myCircleText\").data(data);\n\n      let g = svgEl.append(\"g\");\n      g.selectAll(\"circle\")\n        .data(summaryData) // **\n        .join(\"circle\")\n        .attr(\"cx\", (d) => x_scale(d.tag) + xScale.bandwidth() / 2)\n        .attr(\"cy\", height / 2)\n        .attr(\"r\", (d) => 90)\n        .attr(\"fill\", \"#7df9ff\");\n\n      g.selectAll(\"text\")\n        .data(summaryData) // **\n        .join(\"text\")\n        .attr(\"dx\", (d) =>\n          d.tag === \"highest pollution\"\n            ? x_scale(d.tag) + x_scale.bandwidth() / 2 - 52\n            : x_scale(d.tag) + x_scale.bandwidth() / 2 - 40\n        )\n        .attr(\"dy\", height / 1.8)\n        .text((d) => d.metric)\n        .attr(\"fill\", \"#606161\")\n        .style(\"font-size\", (d) =>\n          d.tag === \"highest pollution\" ? \"40px\" : \"50px\"\n        );\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"vizTitle\">{props.title}</div>\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","import * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function BarchartTool(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const svgHeight = height;\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10,\n  };\n\n  let data = props.rankedWards;\n  let yAxisLabel = \"Average PM 2.5\";\n  // We use two colors here for Highest and lowest pollution\n  // will contain one object per legend entry\n  let legendInfo = [\n    { label: \"Lowest\", color: \"#50C3CD\" },\n    { label: \"Highest\", color: \"#BD762D\" },\n  ];\n  //SORTING BY RANK\n  data = data.sort((a, b) => a.best - b.best);\n\n  //REF: https://bl.ocks.org/guypursey/f47d8cd11a8ff24854305505dbbd8c07\n  function wrap(text, width) {\n    text.each(function () {\n      var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.1, // ems\n        y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text\n          .text(null)\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", y)\n          .attr(\"dy\", dy + \"em\");\n      while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(\" \"));\n        if (tspan.node().getComputedTextLength() > width) {\n          line.pop();\n          tspan.text(line.join(\" \"));\n          line = [word];\n          tspan = text\n            .append(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", y)\n            .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n            .text(word);\n        }\n      }\n    });\n  }\n\n  const renderLegend = (svgEl) => {\n    let divisions = legendInfo.length + 1; // 1 more than the legend entries\n    let size_per_division = svgWidth / divisions;\n\n    // X Scale for LEGEND\n    const xLeg_Scale = d3\n      .scaleLinear()\n      .domain([0, Object.keys(legendInfo).length - 1])\n      .range([size_per_division, width - size_per_division]);\n\n    svgEl\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + svgHeight + \")\")\n      .selectAll(\"text\")\n      .data(legendInfo)\n      .join(\"text\")\n      .attr(\"x\", (d, i) => xLeg_Scale(i))\n      .attr(\"y\", 2 * margin.top - svgHeight)\n      .attr(\"dy\", \"0.5em\")\n      .text((d) => d.label)\n      .attr(\"font-size\", \"18px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", (d) => d.color);\n  };\n\n  useEffect(() => {\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 20;\n\n    // X Scale for data\n    const x_scale = d3\n      .scaleBand()\n      .domain(\n        data.map(function (d) {\n          return d.name;\n        })\n      )\n      .range([0, svgWidth - margin.right])\n      .padding(0.2);\n\n    // Y Scale for data\n    const y_scale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, (d) => Number(d.Average_pm25))])\n      .range([svgHeight, 4 * margin.top]);\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"-30 10\" + \" \" + svgWidth + \" \" + h);\n\n    let xAxis = d3.axisBottom(x_scale);\n\n    if (svgHeight > 0) {\n      /* X axis */\n      svgEl\n        .append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\") // -- for flipping top to bottom\n        .call(xAxis)\n        .selectAll(\".tick text\")\n        .call(wrap, x_scale.bandwidth());\n\n      /* Y axis */\n      let yAxis = d3.axisLeft(y_scale);\n      svgEl.append(\"g\").call(yAxis);\n\n      /* Y Axis label */\n      svgEl\n        .append(\"text\")\n        .attr(\"class\", \"y label\")\n        .attr(\"text-anchor\", \"start\")\n        .attr(\"x\", -250) // TODO get rid of hard coded values\n        .attr(\"y\", -4 * margin.top)\n        .attr(\"dy\", \".75em\")\n        .attr(\"fill\", \"#7c7c7c\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .text(yAxisLabel);\n\n      /* BARS */\n      svgEl\n        .selectAll(\"mybar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function (d) {\n          return x_scale(d.name);\n        })\n        .attr(\"y\", function (d) {\n          return y_scale(Number(d.Average_pm25));\n        })\n        .attr(\"width\", x_scale.bandwidth())\n        .attr(\"height\", function (d) {\n          return svgHeight - y_scale(Number(d.Average_pm25));\n        })\n        .attr(\"fill\", function (d) {\n          return d.best < 4 ? \"#50C3CD\" : \"#BD762D\";\n        });\n\n      renderLegend(svgEl);\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"vizTitle\">{props.title}</div>\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","// import { render } from \"@testing-library/react\";\nimport * as d3 from \"d3\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport default function LinechartToolMonitorHistory(props) {\n  const { width, height } = props;\n  const svgRef = useRef(null);\n\n  const svgWidth = width;\n  const svgHeight = height;\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 100,\n  };\n  const monthOrder = [\n    \"JAN\",\n    \"FEB\",\n    \"MAR\",\n    \"APR\",\n    \"MAY\",\n    \"JUN\",\n    \"JUL\",\n    \"AUG\",\n    \"SEP\",\n    \"OCT\",\n    \"NOV\",\n    \"DEC\",\n  ];\n\n  // https://personal.sron.nl/~pault/\n  // Safe for color blindness as well\n  const colorPalette = [\n    \"#4477AA\",\n    \"#EE6677\",\n    \"#228833\",\n    \"#CCBB44\",\n    \"#66CCEE\",\n    \"#AA3377\",\n    \"#BBBBBB\",\n  ];\n\n  let data = null;\n  let yAxisLabel = \"\";\n  let legendInfo = []; // will contain one object per legend entry\n\n  const dataPrep = () => {\n    data = props.pollutantHistory;\n  };\n\n  const renderMonitorView = (svgEl, xScale, yScale) => {\n    const uniqueYears = [...new Set(d3.map(data, (d, i) => d.Year))];\n\n    for (let yr = 0; yr < uniqueYears.length; yr++) {\n      //filter all records belonging to a year\n      let data_yr = data.filter((d) => d.Year === uniqueYears[yr]);\n\n      //SORTING\n      data_yr = data_yr.sort((a, b) => a.month_number - b.month_number);\n      // if (defined === undefined) defined = (d, i) => !isNaN(X[i]) && !isNaN(Y[i]);\n      // const D = d3.map(data, defined);\n\n      svgEl\n        .append(\"path\")\n        .datum(data_yr)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", colorPalette[yr])\n        .attr(\"stroke-width\", 1)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            // .defined((d) => D[d])\n            .x((d) => xScale(d.Month) + xScale.bandwidth() / 2)\n            .y((d) => yScale(Number(d.monthly_average_pm25)))\n        );\n\n      svgEl\n        .append(\"g\")\n        .selectAll(\"circle\")\n        .data(data_yr)\n        .enter()\n        .append(\"circle\")\n        .attr(\"fill\", (d) =>\n          d.monthly_average_pm25 != \"\" ? colorPalette[yr] : \"white\"\n        )\n        .attr(\"stroke\", colorPalette[yr])\n        .attr(\"stroke-width\", 1)\n        .attr(\"r\", 3)\n        .attr(\"cx\", (d) => xScale(d.Month) + xScale.bandwidth() / 2)\n        .attr(\"cy\", (d) => yScale(Number(d.monthly_average_pm25)));\n\n      // Populate info for legend\n      legendInfo.push({\n        label: uniqueYears[yr].toString(),\n        color: colorPalette[yr],\n      });\n    }\n  };\n\n  //CHART\n  const renderLegend = (svgEl) => {\n    // X Scale for LEGEND\n    let divisions = legendInfo.length + 1; // 1 more than the legend entries\n    let size_per_division = svgWidth / divisions;\n    const xLeg_Scale = d3\n      .scaleLinear()\n      .domain([0, Object.keys(legendInfo).length - 1])\n      .range([size_per_division, svgWidth - size_per_division]);\n\n    //** LEGEND INFO  */\n    svgEl\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + svgHeight + \")\")\n      .selectAll(\"text\")\n      .data(legendInfo)\n      .join(\"text\")\n      .attr(\"x\", (d, i) => xLeg_Scale(i))\n      .attr(\"y\", 2 * margin.top - svgHeight)\n      .attr(\"dy\", \"0.5em\")\n      .text((d) => d.label)\n      .attr(\"font-size\", \"18px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", (d) => d.color);\n  };\n\n  useEffect(() => {\n    dataPrep();\n    yAxisLabel =\n      props.selectedMode.type == \"MPCB\"\n        ? \"Monthly Average RSPM\"\n        : \"Monthly Average PM 2.5\";\n\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove();\n    const h = svgHeight + 20;\n\n    // const X = d3.map(data, (d, i) => d.Month);\n    const X = props.panCityView\n      ? d3.map(monthOrder, (d, i) => d)\n      : d3.map(data, (d, i) => d.Month);\n\n    // X scale\n    const xScale = d3.scaleBand(new d3.InternSet(X), [\n      0,\n      svgWidth - margin.right,\n    ]);\n\n    // Y scale\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        d3.min(data, (d) => Number(d.monthly_average_pm25)) - 2,\n        d3.max(data, (d) => Number(d.monthly_average_pm25)),\n      ])\n      .range([svgHeight, 4 * margin.top]);\n\n    //ViewBOX\n    svgEl.attr(\"viewBox\", \"-30 -2\" + \" \" + svgWidth + \" \" + h);\n\n    if (svgHeight > 0) {\n      /* X AXIS */\n      svgEl\n        .append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + svgHeight + \")\")\n        .call(d3.axisBottom(xScale));\n      /* Y AXIS */\n      svgEl.append(\"g\").call(d3.axisLeft(yScale));\n\n      /* Y Axis label */\n      svgEl\n        .append(\"text\")\n        .attr(\"class\", \"y label\")\n        .attr(\"text-anchor\", \"start\")\n        .attr(\"x\", -250) // TODO get rid of hard coded values\n        .attr(\"y\", -4 * margin.top)\n        .attr(\"dy\", \".75em\")\n        .attr(\"fill\", \"#7c7c7c\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .text(yAxisLabel);\n\n      renderMonitorView(svgEl, xScale, yScale);\n      renderLegend(svgEl);\n    }\n  });\n\n  return (\n    <div>\n      <div\n        className={props.panCityView ? \"vizTitleLineChartPancity\" : \"vizTitle\"}\n      >\n        {props.title}\n        {props.panCityView ? (\n          <span className=\"titleNote\">\n            &emsp; &emsp;\n            {\n              \"(*This chart is independent of the date range above. Hollow circles = missing data.)\"\n            }\n          </span>\n        ) : null}\n      </div>\n\n      <svg width={width} height={height} ref={svgRef}></svg>\n    </div>\n  );\n}\n","import React from \"react\";\nimport * as paths from \"./../paths\";\n\nimport SVGContainer from \"./SVGContainer.js\";\nimport ReactMapTool from \"./vizTools/ReactMapTool.js\";\nimport InfocardTool from \"./vizTools/InfocardTool.js\";\nimport BarchartTool from \"./vizTools/BarchartTool.js\";\nimport LinechartTool from \"./vizTools/LinechartTool.js\";\nimport LinechartToolMonitorHistory from \"./vizTools/LinechartToolMonitorHistory.js\";\n\nexport default class VizPanel extends React.Component {\n  // const [showSVG, setShowSVG] = useState(false); // look up destructuring\n  // function clickHandler() {\n  //     setShowSVG(true);\n  // }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // pollutantHistory: [],\n    };\n  }\n\n  // async getPollutantHistory() {\n  //   let message = \"\";\n\n  //   const payload = {\n  //     selectedMode: this.props.selectedMode.type,\n  //   };\n\n  //   // retrieving data\n  //   const url = paths.POLLUTANTHISTORY;\n  //   const requestOptions = {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify(payload),\n  //   };\n  //   const response = await fetch(url, requestOptions);\n\n  //   //processing retrieved data\n  //   const poll_history = await response.json();\n  //   console.log(\n  //     \" * * * * POLLUTANT HISTORY \" + this.props.selectedMode + \"* * * * \",\n  //     poll_history\n  //   );\n\n  //   this.setState({\n  //     pollutantHistory: poll_history.data,\n  //     loading: false,\n  //   });\n  // }\n\n  // componentDidMount() {\n  //   this.getPollutantHistory();\n  // }\n\n  render() {\n    let units = [];\n    let type = \"WARD\";\n\n    if (this.props.wardPolygons.data !== undefined) {\n      units = this.props.wardPolygons.data.filter(\n        (unit) =>\n          unit.type.toUpperCase() === this.props.selectedMode.type.toUpperCase()\n      );\n      type = this.props.selectedMode.type === \"WARD\" ? \"ward\" : \"monitor\";\n    }\n\n    const ui = (\n      <>\n        <div className=\"text_n_map\">\n          <div className=\"textTool display-linebreak\">\n            {\"This dashboard reports PM 2.5 from various data sources available in Pune. \" +\n              \"The \" +\n              this.props.selectedMode.name +\n              \" data is collected by \" +\n              units.length +\n              \" \" +\n              type +\n              \"s all across Pune.\\n\"}\n            <span style={{ fontStyle: \"italic\" }}>\n              {\" To know more, select your \" +\n                type +\n                \" from the dropdown above.\\n\"}\n            </span>\n            <br />\n            {\n              \"PM 2.5 (particulate matter), an air pollutant, is very harmful to our health. It not only enters our lungs, but can also enter our bloodstream and affect many of our vital organs like the heart, brain and kidneys.\"\n            }\n          </div>\n          <div className=\"mapBaap\">\n            <ReactMapTool\n              panCityView={this.props.panCityView}\n              shapes={this.props.wardPolygons.shapes}\n              monitors={this.props.wardPolygons.data}\n              selectedMode={this.props.selectedMode}\n              selectedWardOrMonitor={this.props.selectedWardOrMonitor}\n            ></ReactMapTool>\n          </div>\n        </div>\n        <div className=\"bar_n_line\">\n          {this.props.panCityView ? (\n            <SVGContainer>\n              <BarchartTool\n                title={\n                  \"Top 3 \" +\n                  (this.props.selectedMode.type === \"WARD\"\n                    ? \"wards\"\n                    : \"monitors\") +\n                  \" showing the lowest to highest levels of pm2.5\"\n                }\n                rankedWards={this.props.rankedWards}\n              ></BarchartTool>\n            </SVGContainer>\n          ) : (\n            <SVGContainer>\n              <InfocardTool\n                title={this.props.selectedWardOrMonitor}\n                selectedMode={this.props.selectedMode}\n                selectedWardOrMonitor={this.props.selectedWardOrMonitor}\n                wardOrMonitorSummary={this.props.wardOrMonitorSummary}\n              />\n            </SVGContainer>\n          )}\n\n          {this.props.panCityView ? (\n            <SVGContainer>\n              <LinechartToolMonitorHistory\n                title={\n                  (this.props.selectedMode.type == \"MPCB\" ? \"RSPM\" : \"PM2.5\") +\n                  \" across all \" +\n                  (this.props.selectedMode.type == \"WARD\"\n                    ? \"wards\"\n                    : \"monitors\") +\n                  \" in Pune\"\n                }\n                pollutantHistory={this.props.pollutantHistory}\n                panCityView={this.props.panCityView}\n                selectedMode={this.props.selectedMode}\n              ></LinechartToolMonitorHistory>\n            </SVGContainer>\n          ) : (\n            <SVGContainer>\n              <LinechartToolMonitorHistory\n                title={\n                  \"PM2.5 history for \" +\n                  this.props.selectedMode.type +\n                  \" \" +\n                  this.props.selectedWardOrMonitor\n                }\n                pollutantHistory={this.props.wardOrMonitorHistory}\n                panCityView={this.props.panCityView}\n                selectedMode={this.props.selectedMode}\n              ></LinechartToolMonitorHistory>\n            </SVGContainer>\n          )}\n        </div>\n      </>\n    );\n\n    return <div className=\"vizpanel\">{ui}</div>;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/ParisarLogo.a617d95d.png\";","import React from \"react\";\nimport * as paths from \"./../paths\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\nimport Select from \"react-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst dataSources = [\n  { name: \"Satellite Based\", type: \"WARD\" },\n  { name: \"Smart City\", type: \"IUDX\" },\n  { name: \"SAFAR\", type: \"SAFAR\" },\n  { name: \"MPCB\", type: \"MPCB\" },\n];\n\nexport default class ControlPanel extends React.Component {\n  unitSelectRef = null;\n  pollutantSelectRef = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedDataSourceId: 0,\n      filteredMonitors: [],\n      wardsAndMonitors: [],\n      // wardsAndMonitors: [\n      //   { label: \"WARD1\", value: \"WARD1\", type: \"WARD\" },\n      //   { label: \"WARD2\", value: \"WARD2\", type: \"WARD\" },\n      //   { label: \"WARD3\", value: \"WARD3\", type: \"WARD\" },\n      //   { label: \"SAFAR1\", value: \"SAFAR1\", type: \"SAFAR\" },\n      //   { label: \"IUDX1\", value: \"IUDX1\", type: \"IUDX\" },\n      //   { label: \"MPCB1\", value: \"MPCB1\", type: \"MPCB\" },\n      // ],\n    };\n  }\n\n  /* Utility*/\n  async getWardsAndMonitors() {\n    // retrieving data\n    const url = paths.WARDSANDMONITORS;\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: null,\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const wardsAndMonitors = await response.json();\n    console.log(\" * * * * WARDS AND MONITORS * * * * \", wardsAndMonitors);\n\n    this.setState({\n      wardsAndMonitors: wardsAndMonitors.data,\n    });\n\n    return wardsAndMonitors;\n  }\n\n  filterWardsAndMonitors(toFilterBy) {\n    return this.state.wardsAndMonitors.filter(\n      (monitor) => monitor.type === toFilterBy.type\n    );\n  }\n\n  /* * Setters */\n\n  setStartDate = (date) => {\n    this.props.setStartDate(date);\n  };\n\n  setEndDate = (date) => {\n    this.props.setEndDate(date);\n  };\n\n  setSelectedMode = (e, i) => {\n    let selectedMode = dataSources.find((ds) => ds.name === e.target.value);\n    this.props.setSelectedMode(selectedMode);\n\n    /*\n    https://stackoverflow.com/questions/50412843/how-to-programmatically-clear-reset-react-select\n    Only if a selection in the monitor dropdown has been made, clear it when a new datasource is selected\n    because the options will repopulate \n    */\n    if (this.unitSelectRef.state.selectValue.length > 0)\n      this.unitSelectRef.clearValue();\n\n    let filteredMonitors = this.filterWardsAndMonitors(selectedMode);\n\n    this.setState({\n      selectedDataSourceId: i,\n      filteredMonitors: filteredMonitors,\n    });\n  };\n\n  setSelectedWardOrMonitor = (e) => {\n    this.props.setSelectedWardOrMonitor(e);\n    this.props.handlePanCityView();\n  };\n\n  /* * * Lifecycle hooks */\n  componentDidMount() {\n    //This handles the data selection bug from DatePicker react widget\n    if (this.state.startDate) {\n      this.state.startDate.setHours(\n        (+1 * this.state.startDate.getTimezoneOffset()) / 60\n      );\n    }\n    // const dataSources = [\"WARD\", \"IUDX\", \"SAFAR\", \"MPCB\"];\n\n    //TESTING\n    // let wnm = this.state.wardsAndMonitors;\n    // let filteredMonitors = this.filterWardsAndMonitors(\n    //   dataSources[this.state.selectedDataSourceId]\n    // );\n    // this.setState({\n    //   filteredMonitors: filteredMonitors,\n    // });\n\n    //FETCHING FROM SERVER\n    let wnm = this.getWardsAndMonitors();\n    wnm.then((value) => {\n      let filteredMonitors = this.filterWardsAndMonitors(\n        dataSources[this.state.selectedDataSourceId]\n      );\n      this.setState({\n        filteredMonitors: filteredMonitors,\n      });\n    });\n  }\n\n  render() {\n    const buttons = (\n      <>\n        {dataSources.map((ds, i) => (\n          <Button\n            key={i}\n            style={{ fontSize: \"12px\" }}\n            value={ds.name}\n            onClick={(event) => this.setSelectedMode(event, i)}\n            active={i === this.state.selectedDataSourceId ? true : false}\n          >\n            {ds.name}\n          </Button>\n        ))}\n      </>\n    );\n\n    return (\n      <div>\n        <div className=\"controlpanel\">\n          <div className=\"controlPanelSection1\">\n            {this.props.panCityView ? (\n              <div className=\"panCityControl\" style={{ zIndex: 999 }}>\n                <ButtonGroup size=\"sm\" className=\"cp-section1items\">\n                  {buttons}\n                </ButtonGroup>\n                <Select\n                  ref={(ref) => {\n                    this.unitSelectRef = ref;\n                  }}\n                  className=\"cp-section1items datasource-select\"\n                  isSearchable={true}\n                  placeholder=\"Select a ward or monitor\"\n                  options={this.state.filteredMonitors}\n                  onChange={this.setSelectedWardOrMonitor}\n                />\n              </div>\n            ) : (\n              <div className=\"panCityControl\">\n                <Button variant=\"link\" onClick={this.props.handlePanCityView}>\n                  Back to Pune City\n                </Button>\n                <div>\n                  {/* {\"Selected \"}\n                  {this.state.selectedDataSourceId === 0\n                    ? \"ward : \"\n                    : dataSources[this.state.selectedDataSourceId] +\n                      \" monitor : \"} */}\n                  &emsp; &emsp;&emsp; &emsp;\n                  {dataSources[this.state.selectedDataSourceId].type +\n                    \"  : \" +\n                    this.props.selectedWardOrMonitor}\n                </div>\n              </div>\n            )}\n            {/* <Select\n              ref={(ref) => {\n                this.pollutantSelectRef = ref;\n              }}\n              className=\"cp-section1items\"\n              placeholder=\"Select a pollutant\"\n            /> */}\n          </div>\n\n          <div className=\"controlPanelSection2\">\n            <DatePicker\n              wrapperClassName=\"cp-section2items\"\n              // dateFormat=\"yyyy/MM/dd\"\n              dateFormat=\"dd/MM/yyyy\"\n              selected={this.props.startDate}\n              onChange={(date) => this.setStartDate(date)}\n            />\n            <label className=\"cp-section2items\"> - </label>\n            <DatePicker\n              wrapperClassName=\"cp-section2items\"\n              dateFormat=\"dd/MM/yyyy\"\n              selected={this.props.endDate}\n              onChange={(date) => this.setEndDate(date)}\n            />\n            <Button\n              variant=\"dark\"\n              size=\"sm\"\n              className=\"cp-section2items\"\n              onClick={this.props.updateDates}\n            >\n              Update\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/faqs.0759e9e7.csv\";","import React, { useEffect, useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport * as d3 from \"d3\";\nimport data from \"./../assets/faqs.csv\";\n\nexport const Faq = (props) => {\n  const [fullscreen, setFullscreen] = useState(true);\n  const [show, setShow] = useState(false);\n  const [faqs, setFaqs] = useState();\n\n  function handleShow(breakpoint) {\n    setFullscreen(breakpoint);\n    setShow(true);\n  }\n\n  const getFaqs = async () => {\n    await d3.csv(data).then((data) => {\n      setFaqs(data);\n    });\n  };\n\n  useEffect(() => {\n    if (!faqs) {\n      getFaqs();\n    }\n  });\n\n  //Components\n  if (faqs) {\n    const faqComponents = [];\n    faqs.forEach((f, i) => {\n      // following a hard coded way for a disciplined framing of Q/A in a csv\n      let bullets = Object.keys(f).filter(\n        (k) => k.includes(\"bullet\") && f[k] !== \"\"\n      );\n      faqComponents.push(\n        <div key={i}>\n          <h4 key={i}>{f.question}</h4>\n          <p key={i} align=\"justify\">\n            {f.answer}\n          </p>\n          <ul>\n            {bullets.map((b, ind) => (\n              <li key={ind} align=\"justify\">\n                {f[b]}\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    });\n    return (\n      <div>\n        <Button\n          style={{\n            color: \"#606161\",\n            backgroundColor: \"#F8F9F9\",\n            borderColor: \"#F8F9F9\",\n          }}\n          onClick={() => handleShow(true)}\n        >\n          FAQs\n        </Button>\n        <Modal\n          show={show}\n          fullscreen={fullscreen}\n          onHide={() => setShow(false)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Frequently Asked Questions</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{faqComponents}</Modal.Body>\n        </Modal>\n      </div>\n    );\n  } else return null;\n};\n","import React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\n// Font Awesome\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faInstagram,\n  faFacebook,\n  faTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nexport const Contact = () => {\n  const [lgShow, setLgShow] = useState(false);\n  library.add(faInstagram, faFacebook, faTwitter);\n\n  return (\n    <>\n      <Button\n        style={{\n          color: \"#606161\",\n          backgroundColor: \"#F8F9F9\",\n          borderColor: \"#F8F9F9\",\n        }}\n        onClick={() => setLgShow(true)}\n      >\n        Contact Us\n      </Button>\n      <Modal\n        size=\"lg\"\n        show={lgShow}\n        onHide={() => setLgShow(false)}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Header closeButton style={{ display: \"flex\" }}>\n          <Modal.Title id=\"example-modal-sizes-title-lg\" style={{ flex: 1 }}>\n            Reach out to us\n          </Modal.Title>\n          <span>\n            <a\n              href=\"https://www.instagram.com/parisar_org/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <FontAwesomeIcon\n                size={\"xl\"}\n                icon=\"fa-brands fa-instagram\"\n                fixedWidth\n              />\n            </a>\n            <a\n              href=\"https://twitter.com/parisarpune\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <FontAwesomeIcon\n                size={\"xl\"}\n                icon=\"fa-brands fa-twitter\"\n                fixedWidth\n              />\n            </a>\n            <a\n              href=\"https://www.facebook.com/ParisarUrbanTransport/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <FontAwesomeIcon\n                size={\"xl\"}\n                icon=\"fa-brands fa-facebook\"\n                fixedWidth\n                className=\"facebook\"\n              />\n            </a>\n          </span>\n        </Modal.Header>\n        <Modal.Body>\n          Please send us your questions{\" \"}\n          <a\n            href=\"https://parisar.org/contact-us\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            here\n          </a>\n          .\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n","/*\nControls the side control panel and the viz Panel\n*/\nimport React from \"react\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as paths from \"./paths\";\n\nimport VizPanel from \"./visualizationPanel/VizPanel.js\";\nimport logo from \"./assets/ParisarLogo.png\";\n\nimport { Nav, Navbar, Container, Alert } from \"react-bootstrap\";\n\nimport ControlPanel from \"./controlPanel/ControlPanel\";\nimport { Faq } from \"./routes/Faq\";\nimport { Contact } from \"./routes/Contact\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMode: { name: \"Satellite Based\", type: \"WARD\" },\n      selectedWardOrMonitor: \"\",\n      panCityView: true,\n      pollutantHistory: [],\n      wardOrMonitorHistory: [],\n      wardOrMonitorSummary: [],\n      wardPolygons: [],\n      rankedWards: [],\n      startDate: new Date(\"2021-04-24\"),\n      endDate: new Date(),\n      alert: {\n        alertRaised: false,\n        alertMessage: \"\",\n      },\n    };\n  }\n\n  updateDates = (e) => {\n    // Fetching NEW data according to UPDATED DATES\n    this.get_pm25Ranks();\n    if (this.state.selectedWardOrMonitor !== \"\") {\n      this.getWardOrMonitorHistory();\n      this.getWardOrMonitorSummary();\n    }\n  };\n\n  // Get top 3 and bottom 3 ranks for pollutants\n  async get_pm25Ranks() {\n    let message = \"\";\n\n    const payload = {\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      selectedMode: this.state.selectedMode.type,\n    };\n\n    // retrieving data\n    const url = paths.RANKEDUNITS;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const responseObject = await response.json();\n    console.log(\n      \" * * * * Ranked \" +\n        this.state.selectedMode.name +\n        \" received from db * * * * \",\n      responseObject\n    );\n\n    if (responseObject.status === \"success\") {\n      this.setState({\n        rankedWards: responseObject.data,\n      });\n    } else {\n      if (responseObject.message === \"No data found in DB\") {\n        message =\n          \"Sorry! We do not have the data for the selected date ranges. Please try changing them.\";\n      }\n\n      this.setState({\n        alert: {\n          alertMessage: message,\n          alertRaised: true,\n        },\n      });\n    }\n  }\n\n  async getPollutantHistory() {\n    let message = \"\";\n\n    const payload = {\n      selectedMode: this.state.selectedMode.type,\n    };\n\n    // retrieving data\n    const url = paths.POLLUTANTHISTORY;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const poll_history = await response.json();\n    console.log(\n      \" * * * * POLLUTANT HISTORY \" + this.state.selectedMode.type + \"* * * * \",\n      poll_history\n    );\n\n    this.setState({\n      pollutantHistory: poll_history.data,\n      loading: false,\n    });\n  }\n\n  async getWardOrMonitorHistory() {\n    let message = \"\";\n\n    const payload = {\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      selectedMode: this.state.selectedMode.type,\n      selectedWardOrMonitor: this.state.selectedWardOrMonitor,\n    };\n\n    // retrieving data\n    const url = paths.WARDORMONITORHISTORY;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n    //processing retrieved data\n    const responseObject = await response.json();\n    console.log(\n      \" * * * * History for \" +\n        payload.selectedMode +\n        payload.selectedWardOrMonitor +\n        \" received from db * * * * \",\n      responseObject\n    );\n\n    if (responseObject.status === \"success\") {\n      this.setState({\n        wardOrMonitorHistory: responseObject.data,\n      });\n    } else {\n      if (responseObject.message === \"No data found in DB\") {\n        message =\n          \"Sorry! We do not have the data for the selected monitor or ward or the date ranges. Please try changing them.\";\n      }\n\n      this.setState({\n        alert: {\n          alertMessage: message,\n          alertRaised: true,\n        },\n      });\n    }\n  }\n\n  async getWardPolygons() {\n    let wardPolygons = this.state.wardPolygons;\n    if (this.state.wardPolygons.length !== 101) {\n      // TODO get this date from UI components\n      let today = new Date(\"2021-06-06\");\n      const payload = {\n        date1: today.toISOString().split(\"T\")[0],\n        categories: [\"iudx\", \"safar\", \"ward\", \"mpcb\"],\n      };\n\n      // retrieving data\n      const url = paths.WARDPOLYGONS;\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      };\n      const response = await fetch(url, requestOptions);\n\n      //processing retrieved data\n      wardPolygons = await response.json();\n      console.log(\n        \" * * * * POLYGONS with pollutants received from db * * * * \",\n        wardPolygons\n      );\n    }\n\n    this.setState({\n      wardPolygons: wardPolygons,\n    });\n  }\n\n  async getWardOrMonitorSummary() {\n    let message = \"\";\n\n    const payload = {\n      startDate: this.state.startDate.toISOString().split(\"T\")[0], // getting a MYSQL date truncate issue if date not formatted this way\n      endDate: this.state.endDate.toISOString().split(\"T\")[0],\n      selectedMode: this.state.selectedMode.type,\n      selectedWardOrMonitor: this.state.selectedWardOrMonitor,\n    };\n\n    // retrieving data\n    const url = paths.WARDORMONITORSUMMARY;\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    };\n    const response = await fetch(url, requestOptions);\n\n    //processing retrieved data\n    const responseObject = await response.json();\n    console.log(\n      \" * * * * Summary for \" +\n        this.state.selectedWardOrMonitor +\n        \" received from db * * * * \",\n      responseObject\n    );\n\n    if (responseObject.status === \"success\") {\n      this.setState({\n        wardOrMonitorSummary: responseObject.data, // only 1 record is always returned\n      });\n    } else {\n      if (responseObject.message === \"No data found in DB\") {\n        message =\n          \"Sorry! We do not have the data for the selected date ranges. Please try changing them.\";\n      }\n\n      this.setState({\n        alert: {\n          alertMessage: message,\n          alertRaised: true,\n        },\n      });\n    }\n  }\n\n  /*\n   * FETCHING DATA FROM API\n   * This is where all the api calls are made to get data from the server\n   */\n  componentDidMount() {\n    // HORIZONTAL BAR CHART TOOL\n    this.get_pm25Ranks();\n    // MAPTOOL\n    this.getWardPolygons();\n    // LINECHARTTOOL\n    this.getPollutantHistory();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // TODO get this verified\n    // Fetching NEW data according to UPDATED SELECTED MODE\n    if (this.state.selectedMode !== prevState.selectedMode) {\n      this.get_pm25Ranks();\n      this.getPollutantHistory();\n    }\n    if (\n      this.state.selectedWardOrMonitor !== prevState.selectedWardOrMonitor &&\n      this.state.selectedWardOrMonitor !== \"\"\n    ) {\n      this.getWardOrMonitorHistory();\n      this.getWardOrMonitorSummary();\n    }\n  }\n\n  handleAlerts = (status) => {\n    this.setState({\n      alert: {\n        alertMessage: \"\",\n        alertRaised: status,\n      },\n    });\n  };\n\n  handlePanCityView = () => {\n    this.setState({\n      panCityView: !this.state.panCityView,\n    });\n  };\n\n  setSelectedWardOrMonitor = (e) => {\n    this.setState({\n      selectedWardOrMonitor: e.value,\n    });\n  };\n  render() {\n    const content = (\n      <>\n        {this.state.alert.alertRaised ? (\n          <Alert\n            variant=\"danger\"\n            onClose={() => this.handleAlerts(false)}\n            dismissible\n          >\n            <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n            <p>{this.state.alert.alertMessage}</p>\n          </Alert>\n        ) : null}\n        <ControlPanel\n          panCityView={this.state.panCityView}\n          updateDates={this.updateDates}\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n          selectedWardOrMonitor={this.state.selectedWardOrMonitor}\n          setSelectedMode={(selectedMode) => {\n            this.setState({\n              selectedMode: selectedMode,\n              selectedWardOrMonitor: \"\",\n            });\n          }}\n          setSelectedWardOrMonitor={this.setSelectedWardOrMonitor}\n          handlePanCityView={this.handlePanCityView}\n          // getWardOrMonitorHistory={this.getWardOrMonitorHistory.bind(this)}\n          setStartDate={(date) => this.setState({ startDate: date })}\n          setEndDate={(date) => this.setState({ endDate: date })}\n        />\n        {false ? (\n          \"Retrieving data . . .\"\n        ) : (\n          <VizPanel\n            startDate={this.state.startDate}\n            endDate={this.state.endDate}\n            selectedMode={this.state.selectedMode}\n            panCityView={this.state.panCityView}\n            selectedWardOrMonitor={this.state.selectedWardOrMonitor}\n            rankedWards={this.state.rankedWards}\n            pollutantHistory={this.state.pollutantHistory}\n            wardOrMonitorHistory={this.state.wardOrMonitorHistory}\n            wardOrMonitorSummary={this.state.wardOrMonitorSummary}\n            wardPolygons={this.state.wardPolygons}\n          />\n        )}\n      </>\n    );\n\n    return (\n      <div className=\"parentdiv\">\n        <Navbar bg=\"light\">\n          <Container>\n            <Navbar.Brand>\n              <img alt=\"\" src={logo} className=\"logo\" />\n              <span className=\"websiteName\">{\"Air Quality Dashboard\"}</span>\n            </Navbar.Brand>\n            <Nav className=\"justify-content-end\">\n              <Faq />\n              <Contact />\n            </Nav>\n          </Container>\n        </Navbar>\n        <div className=\"content\">{content}</div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}